{"mappings":"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","sources":["src/script/lang/iHistory.ts","node_modules/@swc/helpers/src/_define_property.mjs","src/script/lang/executor.ts","src/script/consts/messages.ts","src/script/lang/eResult.ts","src/script/lang/parser.ts","src/script/lang/command.ts","src/script/game/visualizer.ts","src/script/consts/id.ts","src/script/gui/main.ts","src/script/consts/const.ts","src/script/consts/class.ts","src/script/consts/caption.ts","src/script/game/pRunner.ts","src/script/lang/environment.ts","src/script/lang/variable.ts","src/script/lang/rPointer.ts","src/script/game/comparer.ts","src/script/game/task.ts","src/script/gui/logo.ts","src/script/game/taskList.ts","src/script/bundle.ts"],"sourcesContent":["export class InputHistory {\n  private _history: Record<string, string>;\n  private _histValCount: number;\n  private _currentHistElem: number;\n\n  constructor() {\n    this._history = {};\n    this._histValCount = 0;\n    this._currentHistElem = 0;\n  }\n\n  //adding history element\n  addInputHistoryElement = (el: string): void => {\n    this._history[String(this._histValCount)] = el;\n    this._histValCount++;\n  };\n\n  //get next input value\n  getNextInputValue = (): string | null => {\n    if (!this._history[String(this._currentHistElem)]) {\n      return null;\n    }\n    const rslt = eval(this._history[String(this._currentHistElem)]);\n    this._currentHistElem++;\n    return typeof rslt === \"number\" ? String(rslt) : `\"${rslt}\"`;\n  };\n\n  //reset history to start\n  resetInputHistory = (): InputHistory => {\n    this._currentHistElem = 0;\n    return this;\n  };\n}\n","export default function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n","import * as msg from \"../consts/messages\";\nimport { Environment } from \"./environment\";\nimport { ExpressionResult } from \"./eResult\";\nimport { Variable } from \"./variable\";\nimport { Command } from \"./command\";\nimport { Parser } from \"./parser\";\n\n//the command processor\nexport class Executor {\n  replaceOp(\n    str: string,\n    first: string,\n    second: string,\n    oddEven: number\n  ): string {\n    //all first's are changing for second, but not in quotes\n    let isEven = oddEven;\n    return str\n      .split('\"')\n      .map((el) => {\n        isEven ^= 1;\n        if (isEven) {\n          return el.split(first).join(second);\n        } else {\n          return el;\n        }\n      })\n      .join('\"');\n  }\n\n  changeHex(str: string): string {\n    //all HEX's are changing for second, but not in quotes\n    let isEven = 0;\n    return str\n      .split('\"')\n      .map((el) => {\n        isEven ^= 1;\n        if (isEven) {\n          let rslt: string[] | null = [];\n          //find all $H[LETTER] and changing it with 0x[letter]\n          while ((rslt = /&H[0-9A-F]+/.exec(el)) !== null) {\n            rslt.forEach((hex) => {\n              el = el.replace(hex, \"0x\" + hex.slice(2).toLowerCase());\n            });\n          }\n          return el;\n        } else {\n          return el;\n        }\n      })\n      .join('\"');\n  }\n\n  calcExpression(\n    expression: string,\n    logic: number,\n    print: number,\n    env: Environment\n  ): ExpressionResult {\n    expression = expression.trim();\n\n    //all Basic's hex numbers are changin for JS format and eval work properly\n    expression = this.changeHex(expression);\n    //all \"NOT\" changing for \"!\" / \"~\" and eval work properly\n    expression = this.replaceOp(expression, \"NOT\", logic ? \"!\" : \"~\", 0);\n    //all \"AND\" changing for \"&&\" / \"&\" and eval work properly\n    expression = this.replaceOp(expression, \"AND\", logic ? \"&&\" : \"&\", 0);\n    //all \"XOR\" changing for \"^\" and eval work properly\n    let logicalXorFlag = expression;\n    expression = this.replaceOp(expression, \"XOR\", \"^\", 0);\n    if (logic) {\n      logicalXorFlag === expression && (logicalXorFlag = \"\");\n    } else {\n      logicalXorFlag = \"\";\n    }\n    //all \"OR\" changing for \"||\" / \"|\" and eval work properly\n    expression = this.replaceOp(expression, \"OR\", logic ? \"||\" : \"|\", 0);\n\n    //all brackets in the strings (between the quotes) changing for #0x03, #04 codes\n    expression = this.replaceOp(expression, \"(\", \"\\x03\", 1);\n    expression = this.replaceOp(expression, \")\", \"\\x04\", 1);\n\n    let splittedExpr: string[] = expression.split(\"\");\n\n    let count = 0;\n    splittedExpr.forEach((el) => {\n      if (el === \")\" || el === \"(\") {\n        count++;\n      }\n    });\n\n    //deleting start/end brackets if need\n    count === 2 &&\n      splittedExpr[0] === \"(\" &&\n      splittedExpr[splittedExpr.length - 1] === \")\" &&\n      (splittedExpr = splittedExpr.slice(1, splittedExpr.length - 1)) &&\n      (expression = expression.slice(1, expression.length - 1));\n\n    //check that all brackets are pair\n    let isBracketsArePair = 0;\n    splittedExpr.forEach((el) => {\n      isBracketsArePair += el === \"(\" ? 1 : el === \")\" ? -1 : 0;\n    });\n    isBracketsArePair && msg.throwError(env.lp, msg.MESSAGES.EXE_BRACKETS_ERR);\n\n    let isResultString = 0;\n    //find brackets and recusrively calculate it's content\n    while (true) {\n      let length = splittedExpr.length;\n\n      //finding inner brackets\n      for (let i = 0; i < length; i++) {\n        if (splittedExpr[i] === \")\") {\n          for (let j = i; j--; ) {\n            if (splittedExpr[j] === \"(\") {\n              const tmpExpr = this.calcExpression(\n                splittedExpr\n                  .slice(j, i + 1)\n                  .join(\"\")\n                  .trim(),\n                logic,\n                print,\n                env\n              );\n              let rslt = String(tmpExpr.rslt);\n              if (tmpExpr.type === 1) {\n                isResultString = 1;\n                rslt = `'${rslt}'`;\n              }\n              splittedExpr = splittedExpr\n                .slice(0, j)\n                .concat(rslt)\n                .concat(splittedExpr.slice(i + 1, length));\n              length = splittedExpr.length;\n              i = -1;\n              break;\n            }\n          }\n        }\n      }\n      break;\n    }\n\n    expression = splittedExpr.join(\"\");\n\n    //all #0x03, #04 codes are changing for brackets\n    expression = this.replaceOp(expression, \"\\x03\", \"(\", 1);\n    expression = this.replaceOp(expression, \"\\x04\", \")\", 1);\n\n    //changing \">=\" and \"<=\" for properly changing\n    expression = this.replaceOp(expression, \">=\", \"\\x00\", 0);\n    expression = this.replaceOp(expression, \"<=\", \"\\x01\", 0);\n\n    //all \"=\" changing for \"==\" and eval work properly\n    expression = this.replaceOp(expression, \"=\", \"===\", 0);\n    //all \"<>\" changing for \"!=\" and eval work properly\n    expression = this.replaceOp(expression, \"<>\", \"!==\", 0);\n\n    //changing \"x00' AND \"x01\" for \">=\" and \"<=\"\n    expression = this.replaceOp(expression, \"\\x00\", \">=\", 0);\n    expression = this.replaceOp(expression, \"\\x01\", \"<=\", 0);\n\n    let quotesFlag = 0;\n    const exprNoQuotes = [];\n    //delete quotes content and check that all quotes are pair\n    for (let i = 0; i < splittedExpr.length; i++) {\n      splittedExpr[i] === '\"' && (quotesFlag ^= 0x01);\n      splittedExpr[i] !== '\"' &&\n        !quotesFlag &&\n        exprNoQuotes.push(splittedExpr[i]);\n    }\n    quotesFlag && msg.throwError(env.lp, msg.MESSAGES.EXE_QUOTES_ERR);\n    splittedExpr.length !== exprNoQuotes.length && (isResultString = 1);\n\n    //find array elements\n    for (let i = 1; i < exprNoQuotes.length; i++) {\n      //find all numbers after letter or $\n      if (\n        typeof exprNoQuotes[i] === \"number\" &&\n        (exprNoQuotes[i - 1].indexOf(\"$\") >= 0 ||\n          (exprNoQuotes[i - 1] >= \"A\" && exprNoQuotes[i - 1] <= \"Z\"))\n      ) {\n        exprNoQuotes[i - 1] += exprNoQuotes[i];\n        exprNoQuotes[i] = \"\";\n      }\n      //find all string numbers after letter or $\n      if (\n        /[0-9]/.test(exprNoQuotes[i]) &&\n        (exprNoQuotes[i - 1].indexOf(\"$\") >= 0 ||\n          (exprNoQuotes[i - 1] >= \"A\" && exprNoQuotes[i - 1] <= \"Z\"))\n      ) {\n        exprNoQuotes[i - 1] += exprNoQuotes[i];\n        exprNoQuotes[i] = \"\";\n      }\n    }\n\n    //find string variables\n    for (let i = 1; i < exprNoQuotes.length; i++) {\n      if (\n        typeof exprNoQuotes[i] === \"string\" &&\n        exprNoQuotes[i].indexOf(\"$\") >= 0\n      ) {\n        exprNoQuotes[i - 1] += exprNoQuotes[i];\n        exprNoQuotes[i] = \"\";\n      }\n    }\n\n    let isNumberConst = 0;\n    //find numeric constants\n    for (let i = 0; i < exprNoQuotes.length; i++) {\n      if (exprNoQuotes[i] >= \"0\" && exprNoQuotes[i] <= \"9\") {\n        isNumberConst = 1;\n      }\n    }\n\n    //check that all variables present in environment\n    const allVars = exprNoQuotes.filter((el) => {\n      if (el[0] >= \"A\" && el[0] <= \"Z\") {\n        if (env.getVariableByName(el)) {\n          return true;\n        }\n        msg.throwError(env.lp, msg.MESSAGES.EXE_NOT_DEFINED_ERR, el);\n      }\n      return false;\n    });\n\n    //check about mixed types\n    let isTypesAreMixed = 0;\n    allVars.forEach((el) => {\n      isTypesAreMixed += (env.getVariableByName(el) as Variable).type;\n    });\n    //string vars + number vars\n    isTypesAreMixed &&\n      isTypesAreMixed !== allVars.length &&\n      msg.throwError(env.lp, msg.MESSAGES.EXE_MIXED_TYPES_ERR);\n    //string vars + number expression\n    //(isTypesAreMixed) && (!isResultString) && (env.throwError(\"BAD EXPRESSION (MIXED TYPES)\"));\n    //string vars + number const\n    isNumberConst &&\n      isTypesAreMixed &&\n      msg.throwError(env.lp, msg.MESSAGES.EXE_MIXED_TYPES_ERR);\n    //string expression + number vars\n    allVars.length &&\n      isResultString &&\n      !isTypesAreMixed &&\n      msg.throwError(env.lp, msg.MESSAGES.EXE_MIXED_TYPES_ERR);\n    //in result of calculations was number and string constants\n    splittedExpr.forEach((el, idx) => {\n      typeof el === \"number\" &&\n        !/[A-Z$]/.test(splittedExpr[idx - 1]) &&\n        (isResultString || isTypesAreMixed) &&\n        msg.throwError(env.lp, msg.MESSAGES.EXE_MIXED_TYPES_ERR);\n    });\n    isNumberConst &&\n      isResultString &&\n      msg.throwError(env.lp, msg.MESSAGES.EXE_MIXED_TYPES_ERR);\n\n    //prepare preffix string for eval\n    let preffixStr = \"\";\n\n    allVars.forEach((el) => {\n      preffixStr += `var ${el}=`;\n      preffixStr += (env.getVariableByName(el) as Variable).type\n        ? `\"${(env.getVariableByName(el) as Variable).value}\";`\n        : `${(env.getVariableByName(el) as Variable).value};`;\n    });\n    let exprRslt: string | number = 0;\n    try {\n      eval(`${preffixStr} exprRslt=${expression}`);\n    } catch (e) {\n      msg.throwError(env.lp, msg.MESSAGES.EXE_BAD_EXPR_ERR);\n    }\n\n    (String(exprRslt).indexOf(\"undefined\") >= 0 ||\n      String(exprRslt).indexOf(\"NaN\") >= 0) &&\n      msg.throwError(env.lp, msg.MESSAGES.EXE_BAD_EXPR_ERR);\n    String(exprRslt) === \"Infinity\" &&\n      msg.throwError(env.lp, msg.MESSAGES.EXE_ZERO_DIV_ERR);\n\n    let rsltType = typeof exprRslt === \"string\" ? 1 : 0;\n    if (typeof exprRslt === \"boolean\" || logicalXorFlag) {\n      rsltType = 2;\n      logicalXorFlag && (exprRslt = Boolean(exprRslt) as unknown as number);\n    }\n\n    //convert all numeric results to byte\n    if (!rsltType) {\n      exprRslt >>= 0;\n      //exprRslt &= 0xFF;\n    } else {\n      //if not expression for printing then result checking for fit to string variable\n      !print &&\n        rsltType === 1 &&\n        String(exprRslt).length > 8 &&\n        (exprRslt = String(exprRslt).substring(0, 8));\n    }\n\n    return new ExpressionResult(exprRslt, rsltType);\n  }\n\n  //execute one command\n  execute(cmd: Command | null, env: Environment): number {\n    //empty strings / comments\n    if (!cmd) {\n      //if no one next IP then it's the end of program\n      if (!env.setNextLP()) {\n        throw new Error(msg.makeMsg(msg.MESSAGES.EXE_COMPLITED_MSG));\n      }\n      return 0x00;\n    }\n\n    const cmdName = cmd.name;\n\n    //end of program\n    if (cmdName === \"END\") {\n      throw new Error(msg.makeMsg(msg.MESSAGES.EXE_COMPLITED_MSG));\n    }\n\n    //adding new variable (number or string)\n    if (cmdName === \"LET\") {\n      const operand = (cmd.operand as string).trim();\n      const exprResult = cmd.expression\n        ? this.calcExpression(cmd.expression as string, 0, 0, env)\n        : null;\n      let initValue;\n\n      if (operand.indexOf(\"$\") >= 0) {\n        operand.length !== 2 &&\n          msg.throwError(env.lp, msg.MESSAGES.PARSE_LET_STR_NAME_ERR);\n        exprResult &&\n          exprResult.type !== 1 &&\n          msg.throwError(env.lp, msg.MESSAGES.PARST_LET_STR_RSLT_ERR);\n        initValue = \"\";\n      } else {\n        operand.length !== 1 &&\n          msg.throwError(env.lp, msg.MESSAGES.PARSE_LET_NUM_NAME_ERR);\n        exprResult &&\n          exprResult.type !== 0 &&\n          msg.throwError(env.lp, msg.MESSAGES.PARSE_LET_NUM_RSLT_ERR);\n        initValue = 0;\n      }\n      env.createVar(operand, exprResult ? exprResult.rslt : initValue);\n      return 0x01;\n    }\n    //adding new array\n    if (cmdName === \"DIM\") {\n      const operand = (cmd.operand as string).trim().split(\"(\")[0];\n      let initValue;\n\n      if (operand.indexOf(\"$\") >= 0) {\n        operand.length !== 2 &&\n          msg.throwError(env.lp, msg.MESSAGES.PARSE_DIM_STR_NAME_ERR);\n        initValue = \"\";\n      } else {\n        operand.length !== 1 &&\n          msg.throwError(env.lp, msg.MESSAGES.PARSE_DIM_NUM_NAME_ERR);\n        initValue = 0;\n      }\n\n      const exprResult = this.calcExpression(\n        (cmd.operand as string).trim().slice(operand.length),\n        0,\n        0,\n        env\n      );\n      exprResult.type !== 0 &&\n        msg.throwError(env.lp, msg.MESSAGES.PARSE_DIM_NUM_RSLT_ERR);\n\n      const arraySize = exprResult.rslt;\n      arraySize > 8 && msg.throwError(env.lp, msg.MESSAGES.PARSE_DIM_SIZE_ERR);\n      !arraySize &&\n        msg.throwError(env.lp, msg.MESSAGES.PARSE_DIM_ZERO_SIZE_ERR);\n\n      for (let i = 0; i < arraySize; i++) {\n        env.createVar(operand + String(i), initValue);\n      }\n      return 0x01;\n    }\n    //changing variable value\n    if (cmdName === \"=\") {\n      let operand = (cmd.operand as string).trim();\n      const exprResult = this.calcExpression(\n        cmd.expression as string,\n        0,\n        0,\n        env\n      );\n\n      //array element\n      if (/[A-Z]\\$?\\(.+\\)/.test(operand)) {\n        const idxStart = operand.indexOf(\"(\");\n        const idxEnd = operand.lastIndexOf(\")\");\n        const arrIdxExprResult = this.calcExpression(\n          operand.slice(idxStart, idxEnd + 1).trim(),\n          0,\n          0,\n          env\n        );\n        arrIdxExprResult.type &&\n          msg.throwError(env.lp, msg.MESSAGES.PARSE_ASSIGN_IDX_ERR);\n        operand = `${operand.slice(0, idxStart)}(${arrIdxExprResult.rslt})`;\n\n        if (operand.indexOf(\"$\") >= 0) {\n          operand.length !== 5 &&\n            msg.throwError(env.lp, msg.MESSAGES.PARSE_ASSIGN_STR_NAME_ERR);\n          exprResult &&\n            exprResult.type !== 1 &&\n            msg.throwError(env.lp, msg.MESSAGES.PARSE_ASSIGN_STR_RSLT_ERR);\n        } else {\n          operand.length !== 4 &&\n            msg.throwError(env.lp, msg.MESSAGES.PARSE_ASSIGN_NUM_NAME_ERR);\n          exprResult &&\n            exprResult.type &&\n            msg.throwError(env.lp, msg.MESSAGES.PARSE_ASSIGN_NUM_RSLT_ERR);\n        }\n        operand = operand.replace(\"(\", \"\");\n        operand = operand.replace(\")\", \"\");\n      } else {\n        if (operand.indexOf(\"$\") >= 0) {\n          operand.length !== 2 &&\n            msg.throwError(env.lp, msg.MESSAGES.PARSE_LET_STR_NAME_ERR);\n          exprResult &&\n            exprResult.type !== 1 &&\n            msg.throwError(env.lp, msg.MESSAGES.PARST_LET_STR_RSLT_ERR);\n        } else {\n          operand.length !== 1 &&\n            msg.throwError(env.lp, msg.MESSAGES.PARSE_LET_NUM_NAME_ERR);\n          exprResult &&\n            exprResult.type &&\n            msg.throwError(env.lp, msg.MESSAGES.PARSE_LET_NUM_RSLT_ERR);\n        }\n      }\n\n      env.getVariableByName(operand)\n        ? ((env.getVariableByName(operand) as Variable).value = exprResult.rslt)\n        : msg.throwError(\n            env.lp,\n            msg.MESSAGES.PARSE_ASSIGN_NOT_DEFINED_ERR,\n            operand\n          );\n      return 0x01;\n    }\n    //if..then..else\n    if (cmdName === \"IF\") {\n      const operand = (cmd.operand as string).trim();\n      const exprResult = this.calcExpression(\n        cmd.expression as string,\n        1,\n        0,\n        env\n      );\n      exprResult.type !== 2 &&\n        msg.throwError(env.lp, msg.MESSAGES.PARSE_IF_NOT_BOOL_ERR);\n\n      const ifElse = operand.split(\"ELSE\");\n      ifElse.length > 2 &&\n        msg.throwError(env.lp, msg.MESSAGES.PARSE_IF_MANY_ELSE_ERR);\n\n      return new Executor().execute(\n        new Parser().parse(\n          `${env.lp} ` +\n            (exprResult.rslt ? ifElse[0].trim() : (ifElse[1] || \"\").trim()),\n          env\n        ),\n        env\n      );\n    }\n    //goto\n    if (cmdName === \"GOTO\") {\n      const exprResult = this.calcExpression(\n        cmd.expression as string,\n        0,\n        0,\n        env\n      );\n      exprResult &&\n        exprResult.type &&\n        msg.throwError(env.lp, msg.MESSAGES.PARSE_GOTO_NOT_NUM_ERR);\n      env.setLp(exprResult.rslt as string) === null &&\n        msg.throwError(\n          env.lp,\n          msg.MESSAGES.PARSE_GOTO_LINE_UNKNOWN_ERR,\n          exprResult.rslt\n        );\n      return 0x00;\n    }\n    //gosub\n    if (cmdName === \"GOSUB\") {\n      const exprResult = this.calcExpression(\n        cmd.expression as string,\n        0,\n        0,\n        env\n      );\n      const rp = env.lp;\n      exprResult &&\n        exprResult.type &&\n        msg.throwError(env.lp, msg.MESSAGES.PARSE_GOSUB_NOT_NUM_ERR);\n      env.setLp(exprResult.rslt as string) === null &&\n        msg.throwError(\n          env.lp,\n          msg.MESSAGES.PARSE_GOSUB_LINE_UNKNOWN_ERR,\n          exprResult.rslt\n        );\n      env.createRP(rp);\n      return 0x00;\n    }\n    //return\n    if (cmdName === \"RETURN\") {\n      //finding and deleting last return pointer\n      const rp = env.deleteRP();\n      rp === null && msg.throwError(env.lp, msg.MESSAGES.PARSE_RETURN_ERR);\n      env.setLp(rp as string);\n      return 0x01;\n    }\n    //print(ln)\n    if (cmdName === \"PRINT\" || cmdName === \"PRINTLN\") {\n      let exprResult: ExpressionResult | string = \"\";\n      if (cmd.expression) {\n        exprResult = this.calcExpression(cmd.expression, 0, 1, env);\n        exprResult.type > 1 &&\n          msg.throwError(env.lp, msg.MESSAGES.PARSE_PRINT_ERR);\n\n        exprResult = String(\n          /*(exprResult.type) ? */ exprResult.rslt /* : ((((exprResult.rslt as number) & 0xFF) ^ 0x80) - 0x80)*/\n        );\n      }\n      //if println then adding \"\\n\"\n      env.screenPrint(exprResult, cmdName[cmdName.length - 1] === \"N\" ? 1 : 0);\n      return 0x01;\n    }\n    //input\n    if (cmdName === \"INPUT\") {\n      let operand = (cmd.operand as string).trim();\n      const histVal = env.inputHistory.getNextInputValue();\n      histVal === null &&\n        msg.throwError(env.lp, msg.MESSAGES.PARSE_INPUT_EMPTY_ERR);\n      const inputResult = this.calcExpression(histVal as string, 0, 1, env);\n      const exprResult = new ExpressionResult(\n        inputResult && inputResult.type === 1\n          ? (inputResult.rslt as string).substring(0, 8)\n          : inputResult.rslt,\n        inputResult.type\n      );\n\n      //ñäåëàòü âû÷èñëåíèå âûðàæåíèÿ,êîòîðîå ÿâëÿåòñÿ èíäåêñîì ýëåìåíòà ìàññèâà !!!!\n      //äîáàâèòü òî æå ñàìîå â ïðèñâàèâàíèå ïåðåìåííîé!\n\n      //array element\n      if (/[A-Z]\\$?\\(.+\\)/.test(operand)) {\n        const idxStart = operand.indexOf(\"(\");\n        const idxEnd = operand.lastIndexOf(\")\");\n        const arrIdxExprResult = this.calcExpression(\n          operand.slice(idxStart, idxEnd + 1).trim(),\n          0,\n          0,\n          env\n        );\n        arrIdxExprResult.type &&\n          msg.throwError(env.lp, msg.MESSAGES.PARSE_ASSIGN_IDX_ERR);\n        operand = `${operand.slice(0, idxStart)}(${arrIdxExprResult.rslt})`;\n\n        if (operand.indexOf(\"$\") >= 0) {\n          operand.length !== 5 &&\n            msg.throwError(env.lp, msg.MESSAGES.PARSE_ASSIGN_STR_NAME_ERR);\n          exprResult &&\n            exprResult.type !== 1 &&\n            msg.throwError(env.lp, msg.MESSAGES.PARSE_ASSIGN_STR_RSLT_ERR);\n        } else {\n          operand.length !== 4 &&\n            msg.throwError(env.lp, msg.MESSAGES.PARSE_ASSIGN_NUM_NAME_ERR);\n          exprResult &&\n            exprResult.type &&\n            msg.throwError(env.lp, msg.MESSAGES.PARSE_ASSIGN_NUM_RSLT_ERR);\n        }\n        operand = operand.replace(\"(\", \"\");\n        operand = operand.replace(\")\", \"\");\n      } else {\n        if (operand.indexOf(\"$\") >= 0) {\n          operand.length !== 2 &&\n            msg.throwError(env.lp, msg.MESSAGES.PARSE_LET_STR_NAME_ERR);\n          exprResult &&\n            exprResult.type !== 1 &&\n            msg.throwError(env.lp, msg.MESSAGES.PARST_LET_STR_RSLT_ERR);\n        } else {\n          operand.length !== 1 &&\n            msg.throwError(env.lp, msg.MESSAGES.PARSE_LET_NUM_NAME_ERR);\n          exprResult &&\n            exprResult.type &&\n            msg.throwError(env.lp, msg.MESSAGES.PARSE_LET_NUM_RSLT_ERR);\n        }\n      }\n\n      env.getVariableByName(operand)\n        ? ((env.getVariableByName(operand) as Variable).value = exprResult.rslt)\n        : msg.throwError(\n            env.lp,\n            msg.MESSAGES.PARSE_ASSIGN_NOT_DEFINED_ERR,\n            operand\n          );\n      env.screenPrint(` \\x02 ${inputResult.rslt}`, 1);\n      return 0x01;\n    }\n    return 0x01;\n  }\n}\n","export const IDE_NA = \"N/A\";\nexport const enum MESSAGES {\n  IDE_SEMICOLON_ERR = 0,\n  IDE_WRONG_NUMBER_ERR,\n  IDE_NEGATIVE_NUMBER_ERR,\n  IDE_UNSEQUENTAL_NUMBER_ERR,\n  IDE_EMPTY_CODE_ERR,\n\n  VAR_TOO_MANY_ERR,\n  VAR_MEMORY_FULL_ERR,\n  VAR_DEFINED_ERR,\n  VAR_POINTER_ERR,\n\n  CMD_END_ERR,\n  CMD_LET_ERR,\n  CMD_DIM_ERR,\n  CMD_IF_ERR,\n  CMD_MANY_THEN_ERR,\n  CMD_VAR_OMIT_ERR,\n  CMD_VAR_MANY_ERR,\n\n  EXE_BRACKETS_ERR,\n  EXE_QUOTES_ERR,\n  EXE_NOT_DEFINED_ERR,\n  EXE_MIXED_TYPES_ERR,\n  EXE_BAD_EXPR_ERR,\n  EXE_ZERO_DIV_ERR,\n  EXE_COMPLITED_MSG,\n\n  PARSE_LET_STR_NAME_ERR,\n  PARST_LET_STR_RSLT_ERR,\n  PARSE_LET_NUM_NAME_ERR,\n  PARSE_LET_NUM_RSLT_ERR,\n  PARSE_DIM_STR_NAME_ERR,\n  PARSE_DIM_NUM_NAME_ERR,\n  PARSE_DIM_NUM_RSLT_ERR,\n  PARSE_DIM_SIZE_ERR,\n  PARSE_DIM_ZERO_SIZE_ERR,\n\n  PARSE_ASSIGN_IDX_ERR,\n  PARSE_ASSIGN_STR_NAME_ERR,\n  PARSE_ASSIGN_STR_RSLT_ERR,\n  PARSE_ASSIGN_NUM_NAME_ERR,\n  PARSE_ASSIGN_NUM_RSLT_ERR,\n  PARSE_ASSIGN_NOT_DEFINED_ERR,\n\n  PARSE_IF_NOT_BOOL_ERR,\n  PARSE_IF_MANY_ELSE_ERR,\n\n  PARSE_GOTO_NOT_NUM_ERR,\n  PARSE_GOTO_LINE_UNKNOWN_ERR,\n\n  PARSE_GOSUB_NOT_NUM_ERR,\n  PARSE_GOSUB_LINE_UNKNOWN_ERR,\n\n  PARSE_RETURN_ERR,\n  PARSE_PRINT_ERR,\n\n  PARSE_INPUT_EMPTY_ERR,\n\n  UI_CONGRATULATIONS_MSG,\n\n  EXE_LOOPING_MSG,\n\n  UI_EXEC_LINE_MSG,\n  UI_BAD_JS_CODE_START_ERR,\n  UI_BAD_JS_CODE_LINE_ERR,\n  UI_SNAPSHOT_MSG,\n\n  UI_COMPARE_INPUT_ERR,\n  UI_COMPARE_ERR,\n  UI_COMPARE_SCREEN_ERR,\n  UI_COMPARE_SCREEN_LINE_ERR,\n\n  UI_COMPARE_RAM_ERR,\n  UI_COMPARE_FINALLY_RAM_ERR,\n  UI_PICK_THE_LEVEL,\n  UI_GO_TO_THE_LEVEL,\n  UI_LINK_IN_THE_CLIPBOARD,\n}\n\nexport function makeMsg(\n  ...args: [number, (string | number)?, (string | number)?]\n): string {\n  switch (args[0]) {\n    case MESSAGES.IDE_SEMICOLON_ERR:\n      return \"WRONG SEMICOLON CHARACTER AT THE END OF THE LINE\";\n    case MESSAGES.IDE_WRONG_NUMBER_ERR:\n      return \"WRONG NUMBER AT THE BEGINNING OF THE LINE\";\n    case MESSAGES.IDE_NEGATIVE_NUMBER_ERR:\n      return `ERROR ON LINE ${args[1]}: NEGATIVE LINE NUMBERS ARE NOT ALLOWED`;\n    case MESSAGES.IDE_UNSEQUENTAL_NUMBER_ERR:\n      return `LINES MUST HAVE SEQUENTAL NUMBERING (${args[1]} AFTER ${args[2]})`;\n    case MESSAGES.IDE_EMPTY_CODE_ERR:\n      return \"CODE SPACE IS EMPTY\";\n\n    case MESSAGES.VAR_TOO_MANY_ERR:\n      return \"TOO MANY VARIABLES\";\n    case MESSAGES.VAR_MEMORY_FULL_ERR:\n      return `NOT ENOUGH MEMORY FOR CREATING VARIABLE ${args[1]}`;\n    case MESSAGES.VAR_DEFINED_ERR:\n      return `VARIABLE ${args[1]} IS ALREADY DEFINED`;\n    case MESSAGES.VAR_POINTER_ERR:\n      return \"NOT ENOUGH MEMORY TO STORE THE RETURN ADDRESS POINTER ON THE STACK\";\n\n    case MESSAGES.CMD_END_ERR:\n      return \"'END' COMMAND MUST BE WITHOUT PARAMETERS\";\n    case MESSAGES.CMD_LET_ERR:\n      return \"'LET' COMMAND BAD SYNTAX (POSSIBLY TOO MANY '=')\";\n    case MESSAGES.CMD_DIM_ERR:\n      return \"INCORRECT ARRAY CREATION (WHERE IS THE CORRECT SIZE?)\";\n    case MESSAGES.CMD_IF_ERR:\n      return \"'IF..THEN..[ELSE]' BAD SYNTAX (POSSIBLY 'THEN' OMMITED)\";\n    case MESSAGES.CMD_MANY_THEN_ERR:\n      return \"'IF..THEN..[ELSE]' BAD SYNTAX (POSSIBLY MORE THAN ONE 'THEN')\";\n    case MESSAGES.CMD_VAR_OMIT_ERR:\n      return \"ASSIGNMENT OPERATOR BAD SYNTAX (POSSIBLY '=' OMMITED)\";\n    case MESSAGES.CMD_VAR_MANY_ERR:\n      return \"ASSIGNMENT OPERATOR BAD SYNTAX (POSSIBLY MORE THAN ONE '=')\";\n\n    case MESSAGES.EXE_BRACKETS_ERR:\n      return \"ALL BRACKETS IN EXPRESSION MUST BE PAIRED\";\n    case MESSAGES.EXE_QUOTES_ERR:\n      return \"NOT ALL QUOTES ARE PAIRED\";\n    case MESSAGES.EXE_NOT_DEFINED_ERR:\n      return `BAD EXPRESSION (VARIABLE ${args[1]} NOT DEFINED)`;\n    case MESSAGES.EXE_MIXED_TYPES_ERR:\n      return \"BAD EXPRESSION (MIXED TYPES)\";\n    case MESSAGES.EXE_BAD_EXPR_ERR:\n      return \"BAD EXPRESSION\";\n    case MESSAGES.EXE_ZERO_DIV_ERR:\n      return \"DIVISION BY ZERO\";\n\n    case MESSAGES.EXE_COMPLITED_MSG:\n      return \"EXECUTION COMPLITED SUCCESSFULLY!\";\n    case MESSAGES.EXE_LOOPING_MSG:\n      return `IT'S MORE THAN ${args[1]} STEPS ARE DOING. POSSIBLE LOOPING, FORCIBLY STOPPED.`;\n\n    case MESSAGES.PARSE_LET_STR_NAME_ERR:\n      return \"STRING VARIABLE NAME MUST BE ONE CAPITAL LETTER WITH '$'\";\n    case MESSAGES.PARST_LET_STR_RSLT_ERR:\n      return \"INCOMPATIBLE EXPRESSION RESULT FOR STRING VARIABLE (STRING REQUIRED)\";\n\n    case MESSAGES.PARSE_LET_NUM_NAME_ERR:\n      return \"NUMERIC VARIABLE NAME MUST BE ONE CAPITAL LETTER\";\n    case MESSAGES.PARSE_LET_NUM_RSLT_ERR:\n      return \"INCOMPATIBLE EXPRESSION RESULT FOR NUMERIC VARIABLE (NUMBER REQUIRED)\";\n\n    case MESSAGES.PARSE_DIM_STR_NAME_ERR:\n      return \"STRING ARRAY NAME MUST BE ONE CAPITAL LETTER WITH '$'\";\n    case MESSAGES.PARSE_DIM_NUM_NAME_ERR:\n      return \"NUMERIC ARRAY NAME MUST BE ONE CAPITAL LETTER\";\n    case MESSAGES.PARSE_DIM_NUM_RSLT_ERR:\n      return \"INCOMPATIBLE EXPRESSION RESULT FOR ARRAY SIZE (NUMBER REQUIRED)\";\n    case MESSAGES.PARSE_DIM_SIZE_ERR:\n      return \"INCOMPATIBLE ARRAY SIZE (MUST BE POSITIVE NUMBER AND MAXIMUM 8 ELEMENTS)\";\n    case MESSAGES.PARSE_DIM_ZERO_SIZE_ERR:\n      return \"INCOMPATIBLE ARRAY SIZE (ZERO VALUE)\";\n\n    case MESSAGES.PARSE_ASSIGN_IDX_ERR:\n      return \"INCOMPATIBLE ARRAY INDEX (NUMBER REQUIRED)\";\n    case MESSAGES.PARSE_ASSIGN_STR_NAME_ERR:\n      return \"STRING ARRAY ELEMENT NAME MUST BE ONE CAPITAL LETTER WITH '$' AND ARRAY INDEX IN BRACKETS\";\n    case MESSAGES.PARSE_ASSIGN_STR_RSLT_ERR:\n      return \"INCOMPATIBLE EXPRESSION RESULT (STRING REQUIRED)\";\n    case MESSAGES.PARSE_ASSIGN_NUM_NAME_ERR:\n      return \"NUMERIC ARRAY ELEMENT NAME MUST BE ONE CAPITAL LETTER WITH ARRAY INDEX IN BRACKETS\";\n    case MESSAGES.PARSE_ASSIGN_NUM_RSLT_ERR:\n      return \"INCOMPATIBLE EXPRESSION RESULT (NUMBER REQUIRED)\";\n    case MESSAGES.PARSE_ASSIGN_NOT_DEFINED_ERR:\n      return `VARIABLE ${args[1]} MUST BE DEFINED FIRST`;\n\n    case MESSAGES.PARSE_IF_NOT_BOOL_ERR:\n      return \"EXPRESSION RESULT MUST BE OF BOOLEAN TYPE\";\n    case MESSAGES.PARSE_IF_MANY_ELSE_ERR:\n      return \"TOO MANY 'ELSE' (SHOULD BE ONE OR ZERO)\";\n\n    case MESSAGES.PARSE_GOTO_NOT_NUM_ERR:\n      return \"INCOMPATIBLE GOTO DESTINATION (NUMBER REQUIRED)\";\n    case MESSAGES.PARSE_GOTO_LINE_UNKNOWN_ERR:\n      return `INCOMPATIBLE GOTO DESTINATION (UNKNOWN LINE NUMBER ${args[1]})`;\n\n    case MESSAGES.PARSE_GOSUB_NOT_NUM_ERR:\n      return \"INCOMPATIBLE GOSUB DESTINATION (NUMBER REQUIRED)\";\n    case MESSAGES.PARSE_GOSUB_LINE_UNKNOWN_ERR:\n      return `INCOMPATIBLE GOSUB DESTINATION (UNKNOWN LINE NUMBER ${args[1]})`;\n\n    case MESSAGES.PARSE_RETURN_ERR:\n      return \"NO MORE RETURN ADRESSES ON THE STACK\";\n\n    case MESSAGES.PARSE_PRINT_ERR:\n      return \"INCOMPATIBLE EXPRESSION RESULT FOR PRINTING (POSSIBLY BOOLEAN)\";\n\n    case MESSAGES.PARSE_INPUT_EMPTY_ERR:\n      return \"INPUT VALUES LIST IS EMPTY NOW\";\n\n    case MESSAGES.UI_CONGRATULATIONS_MSG:\n      return \"CONGRATULATION! COMPARED PROGRAMS ARE IDENTICAL\";\n    case MESSAGES.UI_EXEC_LINE_MSG:\n      return `EXECUTED LINE:\\n${args[1]}`;\n    case MESSAGES.UI_BAD_JS_CODE_START_ERR:\n      return `INPUT DATA: BAD JS CODE STARTED AT LINE ${args[1]}`;\n    case MESSAGES.UI_BAD_JS_CODE_LINE_ERR:\n      return `INPUT DATA: BAD ONE-STRING JS CODE PLACED AT LINE ${args[1]}`;\n    case MESSAGES.UI_SNAPSHOT_MSG:\n      return `SNAPSHOT ${args[1]} OF ${args[2]}`;\n    case MESSAGES.UI_COMPARE_INPUT_ERR:\n      return \"ERROR IN COMPARED PROGRAM: TOO MANY INPUT COMMANDS\";\n    case MESSAGES.UI_COMPARE_ERR:\n      return `ERROR IN COMPARED PROGRAM:\\n${args[1]}`;\n    case MESSAGES.UI_COMPARE_SCREEN_ERR:\n      return \"COMPARED PROGRAMS ARE NOT IDENTICAL BY SCREEN CHECK:\\nTHE COUNT OF PRINTED LINES DOES NOT MATCH\";\n    case MESSAGES.UI_COMPARE_SCREEN_LINE_ERR:\n      return `COMPARED PROGRAMS ARE NOT IDENTICAL BY SCREEN CHECK:\\nDID NOT MATCH ON THE SCREEN LINE ${args[1]}`;\n    case MESSAGES.UI_COMPARE_RAM_ERR:\n      return \"COMPARED PROGRAMS ARE NOT IDENTICAL BY RAM CHECK\";\n    case MESSAGES.UI_COMPARE_FINALLY_RAM_ERR:\n      return \"COMPARED PROGRAMS ARE NOT IDENTICAL BY RAM CHECK:\\nFINALLY STATES OF RAM DID NOT MATCH\";\n    case MESSAGES.UI_PICK_THE_LEVEL:\n      return `LEVEL ${args[1]}: ${args[2]}`;\n    case MESSAGES.UI_GO_TO_THE_LEVEL:\n      return \"GO\";\n    case MESSAGES.UI_LINK_IN_THE_CLIPBOARD:\n      return \"LINK TO THE LEVEL IS NOW IN THE CLIPBOARD\";\n    default:\n      return \"UNKNOWN ERROR!\";\n  }\n}\n\nexport function throwError(\n  line: string,\n  ...args: [number, (string | number)?, (string | number)?]\n): void {\n  throw new Error(`ERROR IN LINE ${line}: ${makeMsg(...args)}`);\n}\n","export class ExpressionResult {\n  private _rslt: number | string;\n  private _type: number;\n\n  constructor(rslt: number | string, type: number) {\n    this._rslt = rslt;\n    this._type = type;\n  }\n\n  //getters\n  get rslt() {\n    return this._rslt;\n  }\n\n  get type() {\n    return this._type;\n  }\n}\n","import * as msg from \"../consts/messages\";\nimport { Environment } from \"./environment\";\nimport { Command } from \"./command\";\n\n//the parser for command line\nexport class Parser {\n  //parse one string\n  parse(str: string, env: Environment) {\n    str = str.trim();\n\n    //space-divided command\n    const splittedStr = str.split(\" \");\n\n    //switch command of reserved words\n    const command = splittedStr[1];\n\n    //comment\n    //if empty string or only line number or comment\n    if (command === \"REM\" || !str || /^[0-9]+$/.test(str)) {\n      return null;\n    }\n\n    let trimmedStr: string | string[] = splittedStr.slice(2).join(\" \").trim();\n\n    //end of program\n    if (command === \"END\") {\n      trimmedStr.length && msg.throwError(env.lp, msg.MESSAGES.CMD_END_ERR);\n      return new Command(\"END\", null, null);\n    }\n\n    //new variable\n    if (command === \"LET\") {\n      trimmedStr = trimmedStr.split(\"=\");\n      trimmedStr.length > 2 && msg.throwError(env.lp, msg.MESSAGES.CMD_LET_ERR);\n      //if expression not present use default value\n      return new Command(\"LET\", trimmedStr[0], trimmedStr[1] || null);\n    }\n\n    //new array\n    if (command === \"DIM\") {\n      !/\\(.+\\)/.test(trimmedStr) &&\n        msg.throwError(env.lp, msg.MESSAGES.CMD_DIM_ERR);\n      return new Command(\"DIM\", trimmedStr, null);\n    }\n\n    //if\n    if (command === \"IF\") {\n      trimmedStr = trimmedStr.split(\"THEN\");\n      //error: no THEN\n      trimmedStr.length === 1 &&\n        msg.throwError(env.lp, msg.MESSAGES.CMD_IF_ERR);\n      //nested IF's are prohibited\n      trimmedStr.length > 2 &&\n        msg.throwError(env.lp, msg.MESSAGES.CMD_MANY_THEN_ERR);\n      return new Command(\"IF\", trimmedStr[1], trimmedStr[0]);\n    }\n\n    //input\n    if (command === \"INPUT\") {\n      return new Command(\"INPUT\", trimmedStr, null);\n    }\n\n    //goto / gosub\n    if (command === \"GOTO\" || command === \"GOSUB\") {\n      return new Command(command, null, trimmedStr);\n    }\n\n    //return / println\n    if (command === \"RETURN\" || command === \"PRINTLN\" || command === \"PRINT\") {\n      return new Command(\n        command,\n        null,\n        trimmedStr.length !== 0 ? trimmedStr : null\n      );\n    }\n\n    //variable =\n\n    trimmedStr = (command + trimmedStr).split(\"=\");\n    trimmedStr.length === 1 &&\n      msg.throwError(env.lp, msg.MESSAGES.CMD_VAR_OMIT_ERR);\n    trimmedStr.length > 2 &&\n      msg.throwError(env.lp, msg.MESSAGES.CMD_VAR_MANY_ERR);\n    return new Command(\"=\", trimmedStr[0], trimmedStr[1]);\n  }\n}\n","export class Command {\n  //command name\n  private _name: string;\n\n  //operand (operator)\n  private _operand: string | null;\n\n  //expresion (condition)\n  private _expression: string | null;\n\n  constructor(name: string, operand: string | null, expression: string | null) {\n    this._name = name;\n    this._operand = operand;\n    this._expression = expression;\n  }\n\n  //setters\n  set name(name: string) {\n    this._name = name;\n  }\n  //getters\n  get name() {\n    return this._name;\n  }\n  set operand(operand: string | null) {\n    this._operand = operand;\n  }\n  get operand() {\n    return this._operand;\n  }\n  set expression(expr: string | null) {\n    this._expression = expr;\n  }\n  get expression() {\n    return this._expression;\n  }\n}\n","import { ReturnPointer } from \"../lang/rPointer\";\nimport { InputHistory } from \"../lang/iHistory\";\nimport { Variable } from \"../lang/variable\";\n\nexport class Visualizer {\n  private savedRamState: string | null;\n\n  constructor() {\n    this.savedRamState = null;\n  }\n\n  showNeedTextArea(textareas: string[], num: number) {\n    const textareaEls = textareas.map((el) => {\n      return document.getElementById(el);\n    });\n\n    const length = textareaEls.length;\n    for (let i = 0; i < length; i++) {\n      i !== num && ((textareaEls[i] as HTMLElement).style[\"display\"] = \"none\");\n    }\n    (textareaEls[num] as HTMLElement).style[\"display\"] = \"block\";\n  }\n\n  showRam(\n    taName: string | null,\n    vars: { [index: string]: Variable } | null,\n    stack: { [index: string]: ReturnPointer } | null,\n    ramSize: number,\n    simb: number,\n    hex: number\n  ) {\n    const cellToStr = (\n      num: number,\n      simb: number,\n      hex: number,\n      pref: string,\n      suf: string\n    ): string => {\n      pref.length === 0 && (pref = \" \");\n      suf.length === 0 && (suf = \" \");\n      let str = \"\";\n      if (simb) {\n        str = '\"' + String.fromCharCode(num) + '\"';\n      } else {\n        if (hex) {\n          suf += \" \";\n          num &= 0xff;\n          str = num.toString(16);\n          str.length < 2 && (str = \"0\" + str);\n        } else {\n          str = num.toString();\n          if (num < 0) {\n            str = str.substring(1);\n            str.length < 2 && (str = \"00\" + str);\n            str.length < 3 && (str = \"0\" + str);\n            pref = \"-\";\n          } else {\n            str.length < 2 && (str = \"00\" + str);\n            str.length < 3 && (str = \"0\" + str);\n          }\n        }\n      }\n      return pref + str + suf;\n    };\n\n    const ram = new Array<string>(ramSize);\n    for (let i = 0; i < ram.length; i++) {\n      ram[i] = cellToStr(0, 0, hex, \"\", \"\");\n    }\n\n    for (const el in vars) {\n      const val = vars[el].value;\n      if (vars[el].type) {\n        for (let i = 0; i < (val as string).length; i++) {\n          ram[vars[el].address + i] = cellToStr(\n            (val as string).charCodeAt(i),\n            simb,\n            hex,\n            \"\",\n            \"\"\n          );\n        }\n      } else {\n        ram[vars[el].address] = cellToStr(\n          Number(val as number),\n          0,\n          hex,\n          \"\",\n          \"\"\n        );\n      }\n    }\n\n    for (const el in stack) {\n      const val = Number(stack[el].value);\n      ram[stack[el].address] = cellToStr(Number(val & 0xff), 0, hex, \"\", \"\");\n      ram[stack[el].address + 1] = cellToStr(Number(val >>> 8), 0, hex, \"\", \"\");\n    }\n\n    let str = \"\";\n    for (let i = 0, j = 0; i < ram.length; i++, j++) {\n      i !== 0 && !(j & 0x0f) && (str += \"\\n\");\n      str += ram[i];\n    }\n\n    //reset saved ram state\n    !vars && !stack && (this.savedRamState = str.toLowerCase());\n\n    const textarea = taName === null ? null : document.getElementById(taName);\n    //(textarea) && (textarea.value = str.toLowerCase());\n    textarea && (textarea.innerHTML = `<pre>${str.toLowerCase()}</pre>`);\n    return str.toLowerCase();\n  }\n\n  changeShowedRamState(taName: string) {\n    const ta = document.getElementById(taName) as HTMLElement;\n    if (this.savedRamState) {\n      const newState = this.ramVisualizationModify(\n        this.savedRamState,\n        ta.textContent as string\n      );\n      this.savedRamState = ta.textContent;\n      ta.innerHTML = `<pre>${newState}</pre>`;\n    } else {\n      this.savedRamState = ta.textContent;\n    }\n  }\n\n  showScreen(\n    taName: string | null,\n    screen: { [index: string]: string } | null,\n    lastScreenLine: number,\n    rows: number\n  ) {\n    let str = \"\";\n    if (screen !== null) {\n      const start = lastScreenLine > rows ? lastScreenLine - rows : 0;\n      for (let i = start; i <= lastScreenLine; i++) {\n        str += String(i) in screen ? `${screen[String(i)]}\\n` : \"\\n\";\n      }\n    }\n\n    //change simbol for inputs\n    str = str.split(\"\\x02\").join(\"<\");\n\n    const textarea = document.getElementById(\n      taName as string\n    ) as HTMLTextAreaElement;\n    textarea && (textarea.value = str.toLowerCase());\n    return str.toLowerCase();\n  }\n\n  getInputHistory(\n    taName: string | null,\n    str: string | string[] | null\n  ): InputHistory {\n    if (taName !== null) {\n      const textarea = document.getElementById(taName) as HTMLTextAreaElement;\n      str = textarea.value;\n    }\n\n    const inputHist = new InputHistory();\n    let jsCode = \"\";\n    let jsCodeFlag = 0;\n    let jsCodeLine = 0;\n    let linesCount = 0;\n    //if (str.length)\n    {\n      str = (str as string).split(\"\\n\");\n      str.forEach((el) => {\n        linesCount++;\n        el = el.trim();\n        if (!el) {\n          return;\n        }\n\n        const esc = el\n          .split(\" \")\n          .map((el) => {\n            return el.trim();\n          })\n          .filter((el) => {\n            return el.length ? true : false;\n          })\n          .join(\"_\")\n          .trim()\n          .toUpperCase();\n\n        if (esc === \"JS_CODE_START\" && !jsCodeFlag) {\n          jsCodeFlag = 1;\n          jsCodeLine = linesCount;\n        } else {\n          if (esc === \"JS_CODE_END\" && jsCodeFlag) {\n            try {\n              if (!jsCode.trim().length) {\n                return;\n              }\n              const result = eval(jsCode) as string[];\n              result.forEach((rslt) => {\n                inputHist.addInputHistoryElement(String(eval(rslt)));\n              });\n            } catch {\n              throw new Error(\n                `INPUT DATA: BAD JS CODE STARTED AT LINE ${jsCodeLine}`\n              );\n            }\n          } else {\n            //javascript expressions\n            if (jsCodeFlag) {\n              jsCode += `${el}\\n`;\n            } else {\n              try {\n                if (!el.trim().length) {\n                  return;\n                }\n                eval(el);\n              } catch {\n                throw new Error(\n                  `INPUT DATA: BAD ONE-STRING JS CODE STARTED AT LINE ${linesCount}`\n                );\n              }\n              //strings, numbers and one-line JS commands\n              inputHist.addInputHistoryElement(`${el}`);\n            }\n          }\n        }\n      });\n    }\n    return inputHist;\n  }\n\n  ramVisualizationModify(\n    oldState: string | string[],\n    newState: string | string[]\n  ): string {\n    oldState = (oldState as string).trim().split(\"\\n\");\n    newState = (newState as string).trim().split(\"\\n\");\n\n    const stateLength = oldState.length;\n    for (let i = 0; i < stateLength; i++) {\n      let oldLine: string | string[] = oldState[i]\n        .split(' \" \" ')\n        .join(' \"\\x00\" ');\n      let newLine: string | string[] = newState[i]\n        .split(' \" \" ')\n        .join(' \"\\x00\" ');\n\n      oldLine = oldLine.split(\"   \").join(\" \");\n      newLine = newLine.split(\"   \").join(\" \");\n\n      oldLine = oldLine.split(\"  \").join(\" \");\n      newLine = newLine.split(\"  \").join(\" \");\n\n      oldLine = oldLine.split(\" \");\n      newLine = newLine.split(\" \");\n      const lineLength = oldLine.length;\n      for (let j = 0; j < lineLength; j++) {\n        let space = \" \";\n        newLine[j][0] === \"-\" && (space = \"\");\n        if (oldLine[j] !== newLine[j]) {\n          newLine[j] =\n            newLine[j].length < 3\n              ? `<span style=\"color:red\">${space}${newLine[j]}</span>  `\n              : `<span style=\"color:red\">${space}${newLine[j]} </span>`;\n        } else {\n          newLine[j] = newLine[j].trim().length\n            ? newLine[j].length < 3\n              ? `${space}${newLine[j]}  `\n              : `${space}${newLine[j]} `\n            : \"\";\n        }\n      }\n      newState[i] = newLine.join(\"\");\n      newState[i] = newState[i].split(\"\\x00\").join(\" \");\n    }\n    return newState.join(\"\\n\");\n  }\n}\n","export const MAIN_CONTAINER = \"mainContainer\";\nexport const TA_CONSOLE = \"taConsole\";\nexport const TA_CODE = \"taCode\";\nexport const TA_RAM = \"taRam\";\nexport const TA_SCREEN = \"taScreen\";\nexport const TA_INPUT = \"taInput\";\n\nexport const BTN_RUN = \"btnRun\";\nexport const BTN_STEP = \"btnStep\";\nexport const BTN_RST = \"btnReset\";\nexport const BTN_CODE = \"btnCodeRam\";\nexport const BTN_SCREEN = \"btnScreenInput\";\nexport const BTN_SHOW = \"btnShow\";\nexport const BTN_CHECK = \"btnCheck\";\nexport const BTN_NEXT = \"btnNext\";\n\nexport const OPTIONS_CONTAINER = \"options\";\n\nexport const LBL_SIMB = \"cbxSimb\";\nexport const LBL_HEX = \"cbxHex\";\nexport const LBL_HINT = \"cbxHints\";\nexport const LBL_HELP = \"cbxBtnHelpString\";\nexport const LBL_MUSIC = \"cbxPlayMusic\";\nexport const LBL_SCREEN = \"cbxScreen\";\n\nexport const IDE_CONTAINER = \"ideContainer\";\n\nexport const MENU = \"menu\";\n\nexport const MENUBAR_WARN_LBL = \"optionsWarningLbl\";\n\nexport const OPTIONS_BTN = \"optionsBtnId\";\nexport const HELP_BTN = \"helpBtnId\";\nexport const EXP_BTN = \"expBtnId\";\n\nexport const HELP_PAGE = \"helpPage\";\nexport const HELP_SCREEN = \"help\";\n\nexport const TA_TASK_RAM = \"taTaskRam\";\nexport const TA_TASK_SCREEN = \"taTaskScreen\";\n\nexport const TASK_BTNS_CONTAINER = \"taskBtnsContainer\";\n\nexport const BTN_FIRST = \"btnFirst\";\nexport const BTN_TASK_PLAY_PREV = \"btnTaskPlayPrev\";\nexport const BTN_TASK_PREV = \"btnTaskPrev\";\nexport const BTN_TASK_NEXT = \"btnTaskNext\";\nexport const BTN_TASK_PLAY_NEXT = \"btnTaskPlayNext\";\nexport const BTN_LAST = \"btnLast\";\nexport const BTN_RESTART = \"btnRestart\";\nexport const BTN_CLOSE = \"btnClose\";\n\nexport const TASK_CONTAINER = \"taskContainer\";\n\nexport const TASK_LBL = \"taskLbl\";\n\nexport const PICK_LEVEL_CONTAINER = \"pickLevelContainer\";\n\nexport const LOGO_CONTAINER = \"logoContainer\";\n\nexport const EXP_CONTAINER = \"exportContainer\";\nexport const TA_EXP_CODE_HINT = \"taExpCodeHint\";\n\nexport const EXP_TASK_NAME = \"expTaskNameInput\";\n","import * as msg from \"../consts/messages\";\nimport * as cnst from \"../consts/const\";\nimport * as id from \"../consts/id\";\nimport * as classes from \"../consts/class\";\nimport * as caption from \"../consts/caption\";\n\nimport { ProgramRunner } from \"../game/pRunner\";\nimport { Visualizer } from \"../game/visualizer\";\nimport { Comparer } from \"../game/comparer\";\nimport { Task } from \"../game/task\";\nimport { TaskList } from \"../game/taskList\";\n\nimport { logo } from \"./logo\";\n\nexport class GUI {\n  private _options: number[];\n  private _programRunner: ProgramRunner | null;\n  private _visualizer: Visualizer;\n  private _task: Task;\n  private _tasks: TaskList;\n  private _testProg: string;\n  private _checkHist: string;\n  private _testHist: string;\n  private _musicPlayer: HTMLAudioElement | null;\n\n  constructor(tasks: TaskList) {\n    const opt: string | null = window.localStorage.getItem(cnst.LS_OPT_ITEM);\n    this._options = opt\n      ? JSON.parse(opt)\n      : (this._options = [\n          cnst.SIMB_SHOW_INIT_VAL,\n          cnst.HEX_SHOW_INIT_VAL,\n          cnst.HINTS_SHOW_INIT_VAL,\n          cnst.HELP_SHOW_INIT_VAL,\n          cnst.PLAY_MUSIC_INIT_VAL,\n          cnst.ONE_SCREEN_INIT_VAL,\n        ]);\n\n    this._programRunner = null;\n    this._visualizer = new Visualizer();\n\n    this._tasks = tasks;\n\n    this._testProg = tasks.text[tasks.idx].testProg;\n    this._checkHist = tasks.text[tasks.idx].checkHist;\n    this._testHist = tasks.text[tasks.idx].testHist;\n    this._task = new Task(\n      this._testProg.toUpperCase(),\n      this._testHist,\n      null,\n      this._options\n    );\n    this._musicPlayer = null;\n  }\n\n  pickTheLevelScreenSetVisible() {\n    let curLevel = Number(window.localStorage.getItem(cnst.LS_LEVEL_ITEM)) || 0;\n    curLevel >= this._tasks.text.length &&\n      (curLevel = this._tasks.text.length - 1);\n\n    history.pushState(null, \"\", null);\n\n    const logoContainer = document.createElement(\"div\");\n    logoContainer.id = id.LOGO_CONTAINER;\n    logoContainer.classList.add(classes.LOGO);\n    logoContainer.innerHTML = `<pre>${logo}</pre>`;\n\n    const pickLevelContainer = document.createElement(\"div\");\n    pickLevelContainer.id = id.PICK_LEVEL_CONTAINER;\n    pickLevelContainer.className = classes.MENUBAR;\n    (document.querySelector(\"section\") as HTMLElement).appendChild(\n      pickLevelContainer\n    );\n    (document.querySelector(\"section\") as HTMLElement).appendChild(\n      logoContainer\n    );\n\n    const sel = document.createElement(\"div\");\n    sel.className = classes.PICK_LEVEL_SELECTOR;\n    sel.addEventListener(\"click\", (e) => {\n      (e.currentTarget as HTMLDivElement).style[\"height\"] = \"auto\";\n    });\n\n    for (let i: number = curLevel; i >= 0; i--) {\n      const opt = document.createElement(\"div\");\n      opt.textContent = msg.makeMsg(\n        msg.MESSAGES.UI_PICK_THE_LEVEL,\n        i,\n        this._tasks.text[i].name\n      );\n      opt.className = classes.PICK_LEVEL_SELECTOR_OPTIONS;\n      opt.setAttribute(cnst.IDX_ATTRIBUTE_NAME, String(i));\n      opt.addEventListener(\"click\", (e) => {\n        this.startGame(\n          Number(\n            (e.currentTarget as HTMLDivElement).getAttribute(\n              cnst.IDX_ATTRIBUTE_NAME\n            )\n          )\n        );\n        (document.querySelector(\"section\") as HTMLElement).removeChild(\n          document.getElementById(id.PICK_LEVEL_CONTAINER) as HTMLDivElement\n        );\n        (document.querySelector(\"section\") as HTMLElement).removeChild(\n          document.getElementById(id.LOGO_CONTAINER) as HTMLDivElement\n        );\n      });\n      sel.appendChild(opt);\n    }\n\n    const btn = document.createElement(\"button\");\n    btn.className = classes.MENU_BTN;\n    btn.innerHTML = msg.makeMsg(msg.MESSAGES.UI_GO_TO_THE_LEVEL);\n    btn.addEventListener(\"click\", (e) => {\n      this.startGame(curLevel);\n      (document.querySelector(\"section\") as HTMLElement).removeChild(\n        document.getElementById(id.PICK_LEVEL_CONTAINER) as HTMLDivElement\n      );\n      (document.querySelector(\"section\") as HTMLElement).removeChild(\n        document.getElementById(id.LOGO_CONTAINER) as HTMLDivElement\n      );\n    });\n\n    pickLevelContainer.appendChild(sel);\n    pickLevelContainer.appendChild(btn);\n  }\n\n  startGame(curLevel: number, hideStoryText?: boolean) {\n    this._tasks.idx = Number(curLevel);\n\n    this._programRunner = null;\n    this._visualizer = new Visualizer();\n\n    this._testProg = this._tasks.text[this._tasks.idx].testProg;\n    this._testHist = this._tasks.text[this._tasks.idx].testHist;\n    this._checkHist = this._tasks.text[this._tasks.idx].checkHist;\n\n    this._task = new Task(\n      this._testProg.toUpperCase(),\n      this._testHist,\n      null,\n      this._options\n    );\n\n    this.createIdeGui(\n      80,\n      25,\n      18,\n      2,\n      this._tasks.text[this._tasks.idx].codeHint\n    );\n    if (!hideStoryText && this._tasks.text[this._tasks.idx].storyText) {\n      (document.getElementById(id.HELP_PAGE) as HTMLIFrameElement).src = this\n        ._tasks.text[this._tasks.idx].storyText as string;\n      (document.getElementById(id.HELP_BTN) as HTMLButtonElement).dispatchEvent(\n        new MouseEvent(\"click\")\n      );\n    }\n  }\n\n  changeAllBtnsHelpStrings(visible: number) {\n    const btnMOver = (e: MouseEvent) => {\n      const helpString = (e.currentTarget as HTMLButtonElement).getAttribute(\n        cnst.HELP_STRING_ATTRIBUTE_NAME\n      );\n      if (helpString) {\n        const lbl = document.getElementById(\n          id.MENUBAR_WARN_LBL\n        ) as HTMLLabelElement;\n        lbl.innerHTML = helpString;\n        lbl.style[\"display\"] = \"inline-block\";\n      }\n    };\n    const btnMOut = (e: MouseEvent) => {\n      if ((e.currentTarget as HTMLButtonElement).getAttribute(\"helpString\")) {\n        const lbl = document.getElementById(\n          id.MENUBAR_WARN_LBL\n        ) as HTMLLabelElement;\n        lbl.style[\"display\"] = \"none\";\n      }\n    };\n\n    const allBtns = document.querySelectorAll(\"button\");\n    const length = allBtns.length;\n    if (visible) {\n      for (let i = 0; i < length; i++) {\n        (allBtns[i] as HTMLButtonElement).onmouseover = btnMOver;\n        (allBtns[i] as HTMLButtonElement).onmouseout = btnMOut;\n      }\n    } else {\n      for (let i = 0; i < length; i++) {\n        (allBtns[i] as HTMLButtonElement).onmouseover = null;\n        (allBtns[i] as HTMLButtonElement).onmouseout = null;\n      }\n    }\n    (document.getElementById(id.MENUBAR_WARN_LBL) as HTMLLabelElement).style[\n      \"display\"\n    ] = \"none\";\n  }\n\n  createIdeGui(\n    cols: number,\n    rows1: number,\n    rows2: number,\n    rows3: number,\n    codeStr: string\n  ) {\n    let mainDiv = document.getElementById(id.MAIN_CONTAINER) as HTMLDivElement;\n    if (mainDiv) {\n      (mainDiv.parentNode as HTMLElement).removeChild(mainDiv);\n    }\n    mainDiv = document.createElement(\"div\");\n    mainDiv.id = id.MAIN_CONTAINER;\n    mainDiv.className = classes.MAIN_CONTAINER;\n    (document.querySelector(\"section\") as HTMLElement).appendChild(mainDiv);\n\n    const textareas: (HTMLTextAreaElement | HTMLDivElement)[] = [];\n    //important! taRam should not be first in array\n    const tareaIDs = [\n      id.TA_CONSOLE,\n      id.TA_CODE,\n      id.TA_RAM,\n      id.TA_SCREEN,\n      id.TA_INPUT,\n    ];\n    let length = tareaIDs.length;\n    for (let i = 0; i < length; i++) {\n      if (tareaIDs[i] === id.TA_RAM) {\n        textareas[i] = document.createElement(\"div\");\n        textareas[i].className = classes.TA_RAM;\n      } else {\n        textareas[i] = document.createElement(\"textarea\");\n        (textareas[i] as HTMLTextAreaElement).cols = cols;\n        textareas[i].className = classes.TA_MAIN;\n      }\n      textareas[i].id = tareaIDs[i];\n    }\n\n    (textareas[1] as HTMLTextAreaElement).rows = rows2;\n    (textareas[3] as HTMLTextAreaElement).rows = (\n      textareas[4] as HTMLTextAreaElement\n    ).rows = rows1;\n    (textareas[0] as HTMLTextAreaElement).rows = rows3;\n\n    (textareas[0] as HTMLTextAreaElement).readOnly = (\n      textareas[3] as HTMLTextAreaElement\n    ).readOnly = true;\n    textareas[0].tabIndex = textareas[2].tabIndex = textareas[3].tabIndex = -1;\n    textareas[0].style[\"display\"] =\n      textareas[1].style[\"display\"] =\n      textareas[3].style[\"display\"] =\n        \"block\";\n\n    textareas[4].style[\"font-variant\" as unknown as number] = \"small-caps\";\n\n    const btnNames = [\n      caption.BTN_RUN_CAPTION,\n      caption.BTN_STEP_CAPTION,\n      caption.BTN_RST_CAPTION,\n      caption.BTN_CODE_CAPTION,\n      caption.BTN_SCREEN_CAPTION,\n      caption.BTN_SHOW_CAPTION,\n      caption.BTN_CHECK_CAPTION,\n      caption.BTN_NEXT_CAPTION,\n    ];\n    const btnIDs = [\n      id.BTN_RUN,\n      id.BTN_STEP,\n      id.BTN_RST,\n      id.BTN_CODE,\n      id.BTN_SCREEN,\n      id.BTN_SHOW,\n      id.BTN_CHECK,\n      id.BTN_NEXT,\n    ];\n    const btnHelp = [\n      caption.BTN_RUN_HELP,\n      caption.BTN_STEP_HELP,\n      caption.BTN_RST_HELP,\n      caption.BTN_CODE_HELP,\n      caption.BTN_SCREEN_HELP,\n      caption.BTN_SHOW_HELP,\n      caption.BTN_CHECK_HELP,\n      caption.BTN_NEXT_HELP,\n    ];\n    const btns = [];\n    length = btnNames.length;\n    for (let i = 0; i < length; i++) {\n      btns[i] = document.createElement(\"button\");\n      btns[i].innerHTML = btnNames[i];\n      btns[i].id = btnIDs[i];\n      btns[i].className = classes.BTN_MAIN;\n      btns[i].setAttribute(cnst.HELP_STRING_ATTRIBUTE_NAME, btnHelp[i]);\n    }\n\n    btns[7].style[\"display\"] = \"none\";\n\n    const btnsContainer = document.createElement(\"div\");\n    btnsContainer.className = classes.BTN_LEFT;\n\n    const btnsDebugContainer = document.createElement(\"div\");\n    btnsDebugContainer.className = classes.BTN_RIGHT;\n\n    //button \"run\"\n    btns[0].addEventListener(\"click\", (e) => {\n      (document.getElementById(\"btnReset\") as HTMLButtonElement).click();\n      try {\n        this._programRunner ||\n          (this._programRunner = new ProgramRunner(\n            (\n              document.getElementById(id.TA_CODE) as HTMLInputElement\n            ).value.toUpperCase(),\n            this._visualizer.getInputHistory(id.TA_INPUT, null),\n            id.TA_CONSOLE\n          ));\n        this._programRunner.run();\n      } catch (e) {\n        (document.getElementById(id.TA_CONSOLE) as HTMLInputElement).style[\n          \"color\"\n        ] =\n          (e as Error).message === msg.makeMsg(msg.MESSAGES.EXE_COMPLITED_MSG)\n            ? \"green\"\n            : \"red\";\n        (document.getElementById(id.TA_CONSOLE) as HTMLInputElement).value = (\n          e as Error\n        ).message.toLowerCase();\n        if (\n          (e as Error).message !== msg.makeMsg(msg.MESSAGES.EXE_COMPLITED_MSG)\n        ) {\n          //!!! TEMP !!! need actual ramsize const\n          this._visualizer.showRam(\n            id.TA_RAM,\n            null,\n            null,\n            256,\n            this._options[cnst.SIMB_SHOW_IDX],\n            this._options[cnst.HEX_SHOW_IDX]\n          );\n          this._visualizer.showScreen(id.TA_SCREEN, null, 0, 25);\n          this._programRunner = null;\n        } else {\n          this._programRunner &&\n            this._visualizer.showRam(\n              id.TA_RAM,\n              this._programRunner.env.variables,\n              this._programRunner.env.stack,\n              this._programRunner.env.ramSize,\n              this._options[cnst.SIMB_SHOW_IDX],\n              this._options[cnst.HEX_SHOW_IDX]\n            );\n          this._programRunner &&\n            this._visualizer.showScreen(\n              id.TA_SCREEN,\n              this._programRunner.env.screen,\n              this._programRunner.env.screenLine,\n              25\n            );\n        }\n      }\n    });\n\n    //button \"step\"\n    btns[1].addEventListener(\"click\", (e) => {\n      try {\n        this._programRunner ||\n          (this._programRunner = new ProgramRunner(\n            (\n              document.getElementById(id.TA_CODE) as HTMLInputElement\n            ).value.toUpperCase(),\n            this._visualizer.getInputHistory(id.TA_INPUT, null),\n            id.TA_CONSOLE\n          ));\n        this._programRunner.step();\n        this._visualizer.showRam(\n          id.TA_RAM,\n          this._programRunner.env.variables,\n          this._programRunner.env.stack,\n          this._programRunner.env.ramSize,\n          this._options[cnst.SIMB_SHOW_IDX],\n          this._options[cnst.HEX_SHOW_IDX]\n        );\n        this._visualizer.showScreen(\n          id.TA_SCREEN,\n          this._programRunner.env.screen,\n          this._programRunner.env.screenLine,\n          25\n        );\n        this._visualizer.changeShowedRamState(id.TA_RAM);\n      } catch (e) {\n        (document.getElementById(id.TA_CONSOLE) as HTMLInputElement).style[\n          \"color\"\n        ] =\n          (e as Error).message === msg.makeMsg(msg.MESSAGES.EXE_COMPLITED_MSG)\n            ? \"green\"\n            : \"red\";\n        (document.getElementById(id.TA_CONSOLE) as HTMLInputElement).value = (\n          e as Error\n        ).message.toLowerCase();\n        if (\n          (e as Error).message !== msg.makeMsg(msg.MESSAGES.EXE_COMPLITED_MSG)\n        ) {\n          //!!! TEMP !!! need actual ramsize const\n          this._visualizer.showRam(\n            id.TA_RAM,\n            null,\n            null,\n            256,\n            this._options[cnst.SIMB_SHOW_IDX],\n            this._options[cnst.HEX_SHOW_IDX]\n          );\n          this._visualizer.showScreen(id.TA_SCREEN, null, 0, 25);\n          this._programRunner = null;\n        } else {\n          this._programRunner &&\n            this._visualizer.showRam(\n              id.TA_RAM,\n              this._programRunner.env.variables,\n              this._programRunner.env.stack,\n              this._programRunner.env.ramSize,\n              this._options[cnst.SIMB_SHOW_IDX],\n              this._options[cnst.HEX_SHOW_IDX]\n            );\n          this._programRunner &&\n            this._visualizer.showScreen(\n              id.TA_SCREEN,\n              this._programRunner.env.screen,\n              this._programRunner.env.screenLine,\n              25\n            );\n        }\n      }\n    });\n\n    //button \"reset\"\n    btns[2].addEventListener(\"click\", (e) => {\n      this._programRunner = null;\n      (document.getElementById(id.TA_CONSOLE) as HTMLInputElement).value = \"\";\n\n      //!!! TEMP !!! need actual ramsize const\n      this._visualizer.showRam(\n        id.TA_RAM,\n        null,\n        null,\n        256,\n        this._options[cnst.SIMB_SHOW_IDX],\n        this._options[cnst.HEX_SHOW_IDX]\n      );\n      this._visualizer.showScreen(id.TA_SCREEN, null, 0, 25);\n    });\n\n    //button \"code/ram\"\n    btns[3].addEventListener(\"click\", (e) => {\n      const btn = document.getElementById(id.BTN_CODE) as HTMLButtonElement;\n      if (btn.innerHTML === caption.BTN_RAM_CAPTION) {\n        this._visualizer.showNeedTextArea([id.TA_CODE, id.TA_RAM], 0);\n        btn.innerHTML = caption.BTN_CODE_CAPTION;\n      } else {\n        if (this._programRunner) {\n          this._visualizer.showRam(\n            id.TA_RAM,\n            this._programRunner.env.variables,\n            this._programRunner.env.stack,\n            this._programRunner.env.ramSize,\n            this._options[cnst.SIMB_SHOW_IDX],\n            this._options[cnst.HEX_SHOW_IDX]\n          );\n        } else {\n          //!!! TEMP !!! need actual ramsize const\n          this._visualizer.showRam(\n            id.TA_RAM,\n            null,\n            null,\n            256,\n            this._options[cnst.SIMB_SHOW_IDX],\n            this._options[cnst.HEX_SHOW_IDX]\n          );\n        }\n\n        this._visualizer.showNeedTextArea([id.TA_CODE, id.TA_RAM], 1);\n        btn.innerHTML = caption.BTN_RAM_CAPTION;\n      }\n    });\n\n    //button \"screenInput\"\n    btns[4].addEventListener(\"click\", (e) => {\n      const btn = document.getElementById(id.BTN_SCREEN) as HTMLButtonElement;\n      if (btn.innerHTML === caption.BTN_INPUT_CAPTION) {\n        if (this._programRunner) {\n          this._visualizer.showScreen(\n            id.TA_SCREEN,\n            this._programRunner.env.screen,\n            this._programRunner.env.screenLine,\n            25\n          );\n        } else {\n          this._visualizer.showScreen(id.TA_SCREEN, null, 0, 25);\n        }\n\n        this._visualizer.showNeedTextArea([id.TA_SCREEN, id.TA_INPUT], 0);\n        btn.innerHTML = caption.BTN_SCREEN_CAPTION;\n      } else {\n        this._visualizer.showNeedTextArea([id.TA_SCREEN, id.TA_INPUT], 1);\n        btn.innerHTML = caption.BTN_INPUT_CAPTION;\n      }\n    });\n\n    //button \"show\"\n    btns[5].addEventListener(\"click\", (e) => {\n      if (\n        window.screen.availWidth > cnst.MIN_WIDE_SCREEN_WIDTH &&\n        this._options[cnst.ONE_SCREEN_IDX]\n      ) {\n        if (\n          (document.getElementById(id.BTN_SHOW) as HTMLButtonElement)\n            .innerHTML === caption.BTN_HIDE_CAPTION\n        ) {\n          (\n            document.getElementById(id.BTN_SHOW) as HTMLButtonElement\n          ).innerHTML = caption.BTN_SHOW_CAPTION;\n          (document.getElementById(id.TASK_CONTAINER) as HTMLDivElement).style[\n            \"display\"\n          ] = \"none\";\n        } else {\n          (\n            document.getElementById(id.BTN_SHOW) as HTMLButtonElement\n          ).innerHTML = caption.BTN_HIDE_CAPTION;\n          (document.getElementById(id.TASK_CONTAINER) as HTMLDivElement).style[\n            \"display\"\n          ] = \"block\";\n          this._task.showRam(id.TA_TASK_RAM, id.TASK_LBL, this._task.idx);\n          this._task.showScreen(id.TA_TASK_SCREEN, this._task.idx);\n        }\n      } else {\n        (document.getElementById(id.EXP_BTN) as HTMLDivElement).style[\n          \"display\"\n        ] = \"none\";\n\n        (document.getElementById(id.IDE_CONTAINER) as HTMLDivElement).style[\n          \"display\"\n        ] = \"none\";\n        (document.getElementById(id.TASK_CONTAINER) as HTMLDivElement).style[\n          \"display\"\n        ] = \"block\";\n        //show task ram and screen\n        this._task.showRam(id.TA_TASK_RAM, id.TASK_LBL, this._task.idx);\n        this._task.showScreen(id.TA_TASK_SCREEN, this._task.idx);\n      }\n    });\n\n    //button \"check\"\n    btns[6].addEventListener(\"click\", (e) => {\n      const comparer = new Comparer(this._options);\n      if (\n        comparer.compare(\n          this._testProg.toUpperCase(),\n          (\n            document.getElementById(id.TA_CODE) as HTMLInputElement\n          ).value.toUpperCase(),\n          this._checkHist,\n          id.TA_CONSOLE,\n          this._visualizer\n        )\n      ) {\n        (document.getElementById(id.TA_CONSOLE) as HTMLInputElement).style[\n          \"color\"\n        ] = \"green\";\n        (document.getElementById(id.TA_CONSOLE) as HTMLInputElement).value =\n          msg.makeMsg(msg.MESSAGES.UI_CONGRATULATIONS_MSG);\n\n        const oldLevel = window.localStorage.getItem(cnst.LS_LEVEL_ITEM) || 0;\n        const newLevel = this._tasks.idx + 1;\n\n        if (newLevel > oldLevel) {\n          window.localStorage.setItem(cnst.LS_LEVEL_ITEM, String(newLevel));\n        }\n\n        if (this._tasks.idx < this._tasks.text.length - 1) {\n          (document.getElementById(id.BTN_NEXT) as HTMLInputElement).style[\n            \"display\"\n          ] = \"inline-block\";\n        }\n      }\n    });\n    //\n    //button \"next\"\n    btns[7].addEventListener(\"click\", (e) => {\n      //if (this._tasks.idx < this._tasks.text.length - 1) {\n      this.startGame(this._tasks.idx + 1);\n      //}\n    });\n\n    for (let i = 0; i < 3; i++) {\n      btnsDebugContainer.appendChild(btns[i]);\n    }\n\n    for (let i = 5; i < length; i++) {\n      btnsContainer.appendChild(btns[i]);\n    }\n\n    const optionsContainer = document.createElement(\"div\");\n    optionsContainer.id = id.OPTIONS_CONTAINER;\n    optionsContainer.className = classes.OPTIONS_CONTAINER;\n\n    const labelTexts = [\n      caption.LBL_SIMB_TXT,\n      caption.LBL_HEX_TXT,\n      caption.LBL_HINTS_TXT,\n      caption.LBL_HELP_TXT,\n      caption.LBL_PLAY_MUSIC_TXT,\n      caption.LBL_SCREEN_TXT,\n    ];\n    const labels = [];\n    const cbxIds = [\n      id.LBL_SIMB,\n      id.LBL_HEX,\n      id.LBL_HINT,\n      id.LBL_HELP,\n      id.LBL_MUSIC,\n      id.LBL_SCREEN,\n    ];\n    const cbxs = [];\n    for (let i = 0; i < cbxIds.length; i++) {\n      labels[i] = document.createElement(\"label\");\n      labels[i].innerHTML = labelTexts[i];\n      labels[i].className = classes.OPTIONS_LBL;\n\n      cbxs[i] = document.createElement(\"input\");\n      cbxs[i].type = \"checkbox\";\n      cbxs[i].id = cbxIds[i];\n      cbxs[i].className = classes.OPTIONS_CBX;\n\n      const cbxContainer = document.createElement(\"div\");\n      cbxContainer.appendChild(labels[i]);\n      cbxContainer.appendChild(cbxs[i]);\n      optionsContainer.appendChild(cbxContainer);\n    }\n\n    const ideContainer = document.createElement(\"div\");\n    ideContainer.className = classes.IDE_CONTAINER;\n    ideContainer.id = id.IDE_CONTAINER;\n\n    const menuBar = document.createElement(\"div\");\n    menuBar.className = classes.MENUBAR;\n    menuBar.id = id.MENU;\n\n    const optSaveMOver = () => {\n      const lbl = document.getElementById(\n        id.MENUBAR_WARN_LBL\n      ) as HTMLLabelElement;\n      lbl.innerHTML = caption.IDE_RELOADED_TXT;\n      lbl.style[\"color\"] = \"red\";\n      lbl.style[\"display\"] = \"inline-block\";\n    };\n    const optSaveMOut = () => {\n      const lbl = document.getElementById(\n        id.MENUBAR_WARN_LBL\n      ) as HTMLLabelElement;\n      lbl.style[\"color\"] = \"black\";\n      lbl.style[\"display\"] = \"none\";\n    };\n\n    const optionsWarningLbl = document.createElement(\"label\");\n    optionsWarningLbl.className = classes.MENUBAR_LBL;\n    optionsWarningLbl.id = id.MENUBAR_WARN_LBL;\n\n    //menu bar options button\n    const optionsBtn = document.createElement(\"button\");\n    optionsBtn.innerHTML = caption.OPTIONS_CAPTION;\n    optionsBtn.id = id.OPTIONS_BTN;\n    optionsBtn.setAttribute(\n      cnst.HELP_STRING_ATTRIBUTE_NAME,\n      caption.OPTIONS_BNT_HINT_TXT\n    );\n    optionsBtn.addEventListener(\"click\", (e) => {\n      const btnCaption = (\n        document.getElementById(id.OPTIONS_BTN) as HTMLButtonElement\n      ).textContent as string;\n      //show options menu\n      if (btnCaption.charCodeAt(0) === caption.OPTIONS_CAPTION_CODE) {\n        (document.getElementById(id.LBL_SIMB) as HTMLInputElement).checked =\n          Boolean(this._options[cnst.SIMB_SHOW_IDX]);\n        (document.getElementById(id.LBL_HEX) as HTMLInputElement).checked =\n          Boolean(this._options[cnst.HEX_SHOW_IDX]);\n        (document.getElementById(id.LBL_HINT) as HTMLInputElement).checked =\n          Boolean(this._options[cnst.HINTS_SHOW_IDX]);\n        (document.getElementById(id.LBL_HELP) as HTMLInputElement).checked =\n          Boolean(this._options[cnst.HELP_SHOW_IDX]);\n        (document.getElementById(id.LBL_MUSIC) as HTMLInputElement).checked =\n          Boolean(this._options[cnst.PLAY_MUSIC_IDX]);\n        (document.getElementById(id.LBL_SCREEN) as HTMLInputElement).checked =\n          Boolean(this._options[cnst.ONE_SCREEN_IDX]);\n\n        (\n          document.getElementById(id.OPTIONS_BTN) as HTMLButtonElement\n        ).innerHTML = caption.NO_CAPTION;\n\n        const helpBtn = document.getElementById(\n          id.HELP_BTN\n        ) as HTMLButtonElement;\n        helpBtn.addEventListener(\"mouseover\", optSaveMOver);\n        helpBtn.addEventListener(\"mouseout\", optSaveMOut);\n        helpBtn.innerHTML = caption.YES_CAPTION;\n\n        (document.getElementById(id.EXP_BTN) as HTMLButtonElement).style[\n          \"display\"\n        ] = \"none\";\n\n        (document.getElementById(id.OPTIONS_CONTAINER) as HTMLDivElement).style[\n          \"display\"\n        ] = \"flex\";\n\n        (\n          document.getElementById(id.MAIN_CONTAINER) as HTMLDivElement\n        ).classList.add(classes.MAIN_CONTAINER_SHOWED_OPTIONS);\n\n        //disable buttons help strings\n        this.changeAllBtnsHelpStrings(0);\n      } else {\n        //close options menu\n        if (btnCaption.charCodeAt(0) === caption.NO_CAPTION_CODE) {\n          (\n            document.getElementById(id.OPTIONS_BTN) as HTMLButtonElement\n          ).innerHTML = caption.OPTIONS_CAPTION;\n\n          const helpBtn = document.getElementById(\n            id.HELP_BTN\n          ) as HTMLButtonElement;\n          helpBtn.removeEventListener(\"mouseover\", optSaveMOver);\n          helpBtn.removeEventListener(\"mouseout\", optSaveMOut);\n          helpBtn.innerHTML = caption.HELP_CAPTION;\n\n          (document.getElementById(id.EXP_BTN) as HTMLButtonElement).style[\n            \"display\"\n          ] = \"inline-block\";\n\n          (\n            document.getElementById(id.OPTIONS_CONTAINER) as HTMLDivElement\n          ).style[\"display\"] = \"none\";\n\n          (\n            document.getElementById(id.MAIN_CONTAINER) as HTMLDivElement\n          ).classList.remove(classes.MAIN_CONTAINER_SHOWED_OPTIONS);\n\n          //show buttons help strings if variable is truthy\n          this.changeAllBtnsHelpStrings(this._options[cnst.HELP_SHOW_IDX]);\n        }\n      }\n    });\n\n    //menu bar help button\n    const helpBtn = document.createElement(\"button\");\n    helpBtn.innerHTML = caption.HELP_CAPTION;\n    helpBtn.id = id.HELP_BTN;\n    helpBtn.setAttribute(\n      cnst.HELP_STRING_ATTRIBUTE_NAME,\n      caption.HELP_BTN_HINT_TXT\n    );\n    helpBtn.addEventListener(\"click\", () => {\n      const btnCaption = (\n        document.getElementById(id.HELP_BTN) as HTMLButtonElement\n      ).textContent as string;\n      //save options data\n      if (btnCaption.charCodeAt(0) === caption.YES_CAPTION_CODE) {\n        (\n          document.getElementById(id.OPTIONS_BTN) as HTMLButtonElement\n        ).innerHTML = caption.OPTIONS_CAPTION;\n\n        const helpBtn = document.getElementById(\n          id.HELP_BTN\n        ) as HTMLButtonElement;\n        helpBtn.removeEventListener(\"mouseover\", optSaveMOver);\n        helpBtn.removeEventListener(\"mouseout\", optSaveMOut);\n        helpBtn.innerHTML = caption.HELP_CAPTION;\n\n        (document.getElementById(id.EXP_BTN) as HTMLButtonElement).style[\n          \"display\"\n        ] = \"inline-block\";\n\n        (document.getElementById(id.OPTIONS_CONTAINER) as HTMLDivElement).style[\n          \"display\"\n        ] = \"none\";\n\n        (\n          document.getElementById(id.MAIN_CONTAINER) as HTMLDivElement\n        ).classList.remove(classes.MAIN_CONTAINER_SHOWED_OPTIONS);\n\n        this._options[cnst.HEX_SHOW_IDX] = Number(\n          (document.getElementById(id.LBL_HEX) as HTMLInputElement).checked\n        );\n        this._options[cnst.SIMB_SHOW_IDX] = Number(\n          (document.getElementById(id.LBL_SIMB) as HTMLInputElement).checked\n        );\n        this._options[cnst.HINTS_SHOW_IDX] = Number(\n          (document.getElementById(id.LBL_HINT) as HTMLInputElement).checked\n        );\n        this._options[cnst.HELP_SHOW_IDX] = Number(\n          (document.getElementById(id.LBL_HELP) as HTMLInputElement).checked\n        );\n        this._options[cnst.PLAY_MUSIC_IDX] = Number(\n          (document.getElementById(id.LBL_MUSIC) as HTMLInputElement).checked\n        );\n        this._options[cnst.ONE_SCREEN_IDX] = Number(\n          (document.getElementById(id.LBL_SCREEN) as HTMLInputElement).checked\n        );\n\n        //save changed this._options\n        window.localStorage.setItem(\n          cnst.LS_OPT_ITEM,\n          JSON.stringify(this._options)\n        );\n\n        //restarts with new parameters\n        this.startGame(this._tasks.idx, true);\n\n        //show buttons help strings if variable is truthy\n        this.changeAllBtnsHelpStrings(this._options[cnst.HELP_SHOW_IDX]);\n      } else {\n        //help\n        if (btnCaption === caption.HELP_CAPTION) {\n          (document.getElementById(id.OPTIONS_BTN) as HTMLButtonElement).style[\n            \"display\"\n          ] = \"none\";\n\n          (\n            document.getElementById(id.HELP_BTN) as HTMLButtonElement\n          ).innerHTML = caption.NO_CAPTION;\n\n          (document.getElementById(id.EXP_BTN) as HTMLButtonElement).style[\n            \"display\"\n          ] = \"none\";\n\n          (document.getElementById(id.HELP_SCREEN) as HTMLDivElement).style[\n            \"display\"\n          ] = \"block\";\n\n          const ideContainer = document.getElementById(\n            id.IDE_CONTAINER\n          ) as HTMLDivElement;\n          ideContainer.setAttribute(\n            cnst.DISPLAY_ATTRIBUTE_NAME,\n            ideContainer.style[\"display\"]\n          );\n          ideContainer.style[\"display\"] = \"none\";\n\n          const taskContainer = document.getElementById(\n            id.TASK_CONTAINER\n          ) as HTMLDivElement;\n          taskContainer.setAttribute(\n            cnst.DISPLAY_ATTRIBUTE_NAME,\n            taskContainer.style[\"display\"]\n          );\n          taskContainer.style[\"display\"] = \"none\";\n\n          //disable buttons help strings\n          this.changeAllBtnsHelpStrings(0);\n        } else {\n          //close help screen\n          if (btnCaption.charCodeAt(0) === caption.NO_CAPTION_CODE) {\n            (\n              document.getElementById(id.OPTIONS_BTN) as HTMLButtonElement\n            ).style[\"display\"] = \"inline-block\";\n\n            (\n              document.getElementById(id.HELP_BTN) as HTMLButtonElement\n            ).innerHTML = caption.HELP_CAPTION;\n\n            (document.getElementById(id.EXP_BTN) as HTMLButtonElement).style[\n              \"display\"\n            ] = \"inline-block\";\n\n            (document.getElementById(id.HELP_SCREEN) as HTMLDivElement).style[\n              \"display\"\n            ] = \"none\";\n\n            (document.getElementById(id.IDE_CONTAINER) as HTMLDivElement).style[\n              \"display\"\n            ] = \"block\";\n\n            const ideContainer = document.getElementById(\n              id.IDE_CONTAINER\n            ) as HTMLDivElement;\n            ideContainer.style[\"display\"] = ideContainer.getAttribute(\n              cnst.DISPLAY_ATTRIBUTE_NAME\n            ) as string;\n\n            const taskContainer = document.getElementById(\n              id.TASK_CONTAINER\n            ) as HTMLDivElement;\n            taskContainer.style[\"display\"] = taskContainer.getAttribute(\n              cnst.DISPLAY_ATTRIBUTE_NAME\n            ) as string;\n\n            //show buttons help strings if variable is truthy\n            this.changeAllBtnsHelpStrings(this._options[cnst.HELP_SHOW_IDX]);\n\n            (\n              document.getElementById(id.HELP_PAGE) as HTMLIFrameElement\n            ).addEventListener(\"load\", () => {\n              history.pushState(null, \"\", null);\n            });\n            (document.getElementById(id.HELP_PAGE) as HTMLIFrameElement).src =\n              cnst.HELP_PAGE_SRC;\n          }\n        }\n      }\n    });\n\n    //menu bar export user level button\n    const expBtn = document.createElement(\"button\");\n    expBtn.innerHTML = caption.EXP_CAPTION;\n    expBtn.id = id.EXP_BTN;\n    expBtn.setAttribute(\n      cnst.HELP_STRING_ATTRIBUTE_NAME,\n      caption.EXP_BTN_HINT_TXT\n    );\n\n    //button \"export user level\"\n    expBtn.addEventListener(\"click\", () => {\n      const btnCaption = (\n        document.getElementById(id.EXP_BTN) as HTMLButtonElement\n      ).textContent as string;\n      //close export screen\n      if (btnCaption.charCodeAt(0) === caption.YES_CAPTION_CODE) {\n        const userTaskList: TaskList = {\n          text: [\n            {\n              name: (\n                document.getElementById(id.EXP_TASK_NAME) as HTMLInputElement\n              ).value,\n              codeHint: (\n                document.getElementById(\n                  id.TA_EXP_CODE_HINT\n                ) as HTMLTextAreaElement\n              ).value,\n              testProg: (\n                document.getElementById(id.TA_CODE) as HTMLTextAreaElement\n              ).value,\n              testHist: (\n                document.getElementById(id.TA_INPUT) as HTMLTextAreaElement\n              ).value,\n              checkHist: (\n                document.getElementById(id.TA_INPUT) as HTMLTextAreaElement\n              ).value,\n            },\n          ],\n          idx: 0,\n        };\n\n        const userTaskBase64 = `${cnst.ABSOLUTE_PATH}${cnst.REPO_NAME}/${btoa(\n          JSON.stringify(userTaskList)\n        )}`;\n\n        navigator.clipboard.writeText(userTaskBase64).then(() => {\n          (document.getElementById(id.TA_CONSOLE) as HTMLInputElement).style[\n            \"color\"\n          ] = \"green\";\n          (document.getElementById(id.TA_CONSOLE) as HTMLInputElement).value =\n            msg.makeMsg(msg.MESSAGES.UI_LINK_IN_THE_CLIPBOARD);\n        });\n\n        (document.getElementById(id.EXP_BTN) as HTMLButtonElement).innerHTML =\n          caption.EXP_CAPTION;\n\n        (document.getElementById(id.HELP_BTN) as HTMLButtonElement).style[\n          \"display\"\n        ] = \"inline-block\";\n\n        (document.getElementById(id.OPTIONS_BTN) as HTMLButtonElement).style[\n          \"display\"\n        ] = \"inline-block\";\n\n        (document.getElementById(id.EXP_CONTAINER) as HTMLDivElement).style[\n          \"display\"\n        ] = \"none\";\n\n        const ideContainer = document.getElementById(\n          id.IDE_CONTAINER\n        ) as HTMLDivElement;\n        ideContainer.style[\"display\"] = ideContainer.getAttribute(\n          cnst.DISPLAY_ATTRIBUTE_NAME\n        ) as string;\n\n        const taskContainer = document.getElementById(\n          id.TASK_CONTAINER\n        ) as HTMLDivElement;\n        taskContainer.style[\"display\"] = taskContainer.getAttribute(\n          cnst.DISPLAY_ATTRIBUTE_NAME\n        ) as string;\n\n        //show buttons help strings if variable is truthy\n        this.changeAllBtnsHelpStrings(this._options[cnst.HELP_SHOW_IDX]);\n      } else {\n        (document.getElementById(\"btnReset\") as HTMLButtonElement).click();\n        try {\n          const programRunner = new ProgramRunner(\n            (\n              document.getElementById(id.TA_CODE) as HTMLInputElement\n            ).value.toUpperCase(),\n            this._visualizer.getInputHistory(id.TA_INPUT, null),\n            id.TA_CONSOLE\n          );\n          programRunner.run();\n        } catch (e) {\n          if (\n            (e as Error).message === msg.makeMsg(msg.MESSAGES.EXE_COMPLITED_MSG)\n          ) {\n            //show export screen\n            (\n              document.getElementById(id.EXP_BTN) as HTMLButtonElement\n            ).innerHTML = caption.YES_CAPTION;\n\n            (document.getElementById(id.HELP_BTN) as HTMLButtonElement).style[\n              \"display\"\n            ] = \"none\";\n\n            (\n              document.getElementById(id.OPTIONS_BTN) as HTMLButtonElement\n            ).style[\"display\"] = \"none\";\n\n            (document.getElementById(id.EXP_CONTAINER) as HTMLDivElement).style[\n              \"display\"\n            ] = \"block\";\n\n            (\n              document.getElementById(\n                id.TA_EXP_CODE_HINT\n              ) as HTMLTextAreaElement\n            ).value = (\n              document.getElementById(id.TA_CODE) as HTMLTextAreaElement\n            ).value;\n\n            const ideContainer = document.getElementById(\n              id.IDE_CONTAINER\n            ) as HTMLDivElement;\n            ideContainer.setAttribute(\n              cnst.DISPLAY_ATTRIBUTE_NAME,\n              ideContainer.style[\"display\"]\n            );\n            ideContainer.style[\"display\"] = \"none\";\n\n            const taskContainer = document.getElementById(\n              id.TASK_CONTAINER\n            ) as HTMLDivElement;\n            taskContainer.setAttribute(\n              cnst.DISPLAY_ATTRIBUTE_NAME,\n              taskContainer.style[\"display\"]\n            );\n            taskContainer.style[\"display\"] = \"none\";\n\n            //disable buttons help strings\n            this.changeAllBtnsHelpStrings(0);\n          } else {\n            (document.getElementById(id.TA_CONSOLE) as HTMLInputElement).style[\n              \"color\"\n            ] = \"red\";\n            (document.getElementById(id.TA_CONSOLE) as HTMLInputElement).value =\n              (e as Error).message.toLowerCase();\n          }\n        }\n      }\n    });\n\n    optionsBtn.className =\n      helpBtn.className =\n      expBtn.className =\n        classes.MENU_BTN;\n\n    menuBar.appendChild(optionsWarningLbl);\n    menuBar.appendChild(expBtn);\n    menuBar.appendChild(helpBtn);\n    menuBar.appendChild(optionsBtn);\n\n    const helpPage = document.createElement(\"iframe\");\n    helpPage.id = id.HELP_PAGE;\n    helpPage.className = classes.HELP_PAGE_MAIN;\n    /* eslint-disable no-undef */\n    helpPage.onload = function () {\n      (\n        (document.getElementById(id.HELP_PAGE) as HTMLIFrameElement)\n          .contentWindow as WindowProxy\n      ).document.body.style[\"color\"] = \"green\";\n    };\n    /* eslint-enable */\n    helpPage.src = cnst.HELP_PAGE_SRC;\n\n    const helpScreen = document.createElement(\"div\");\n    helpScreen.id = id.HELP_SCREEN;\n    helpScreen.className = classes.HELP_SCREEN_MAIN;\n    helpScreen.appendChild(helpPage);\n\n    mainDiv.appendChild(helpScreen);\n    mainDiv.appendChild(menuBar);\n    mainDiv.appendChild(optionsContainer);\n\n    let taContainer1 = document.createElement(\"div\");\n    taContainer1.className = classes.TA_CONTAINER;\n\n    let taContainer2 = document.createElement(\"div\");\n    taContainer2.className = classes.TA_CONTAINER;\n\n    if (window.screen.availWidth > cnst.MIN_WIDE_SCREEN_WIDTH) {\n      taContainer1.appendChild(btns[3]);\n      taContainer1.appendChild(textareas[1]);\n      taContainer1.appendChild(textareas[2]);\n      taContainer1.appendChild(textareas[0]);\n      taContainer1.appendChild(btnsDebugContainer);\n      taContainer1.appendChild(btnsContainer);\n\n      taContainer2.appendChild(btns[4]);\n      taContainer2.appendChild(textareas[3]);\n      taContainer2.appendChild(textareas[4]);\n\n      ideContainer.appendChild(taContainer1);\n      ideContainer.appendChild(taContainer2);\n    } else {\n      taContainer1.className = classes.TA_CONTAINER;\n      taContainer1.appendChild(btns[3]);\n      taContainer1.appendChild(textareas[1]);\n      taContainer1.appendChild(textareas[2]);\n      taContainer1.appendChild(textareas[0]);\n      taContainer1.appendChild(btnsDebugContainer);\n      taContainer1.appendChild(btnsContainer);\n      taContainer1.style[\"width\"] = \"100%\";\n\n      taContainer2.appendChild(textareas[3]);\n      taContainer2.appendChild(textareas[4]);\n      taContainer2.style[\"width\"] = \"100%\";\n\n      ideContainer.appendChild(taContainer1);\n      ideContainer.appendChild(taContainer2);\n      ideContainer.appendChild(btns[4]);\n    }\n\n    mainDiv.appendChild(ideContainer);\n\n    //set \"textarea\" div width and height\n    textareas[2].style[\"width\"] = textareas[1].clientWidth + 2 + \"px\";\n    textareas[2].style[\"height\"] = textareas[1].clientHeight + 2 + \"px\";\n\n    const taskTareaIDs = [id.TA_TASK_RAM, id.TA_TASK_SCREEN];\n    const taskTextareas = [];\n    length = taskTareaIDs.length;\n\n    for (let i = 0; i < length; i++) {\n      if (i) {\n        taskTextareas[i] = document.createElement(\"textarea\");\n        (taskTextareas[i] as HTMLTextAreaElement).cols = cols;\n        taskTextareas[i].className = classes.TA_TASK_MAIN;\n        (taskTextareas[i] as HTMLTextAreaElement).readOnly = true;\n      }\n      //task ram \"textarea\"\n      else {\n        taskTextareas[i] = document.createElement(\"div\");\n        taskTextareas[i].className = classes.TA_TASK_RAM;\n      }\n      taskTextareas[i].id = taskTareaIDs[i];\n      taskTextareas[i].tabIndex = -1;\n    }\n    (taskTextareas[0] as HTMLTextAreaElement).rows = rows2;\n    (taskTextareas[1] as HTMLTextAreaElement).rows = rows1;\n\n    const taskBtnsContainer = document.createElement(\"div\");\n    taskBtnsContainer.className = classes.TASK_BTNS_CONTAINER_MAIN;\n    taskBtnsContainer.id = id.TASK_BTNS_CONTAINER;\n\n    const taskBtnNames = [\n      caption.BTN_FIRST_CAPTION,\n      caption.BTN_TASK_PLAY_PREV_CAPTION,\n      caption.BTN_TASK_PREV_CAPTION,\n      caption.BTN_TASK_NEXT_CAPTION,\n      caption.BTN_TASK_PLAY_NEXT_CAPTION,\n      caption.BTN_LAST_CAPTION,\n      caption.BTN_RESTART_CAPTION,\n      caption.BTN_CLOSE_CAPTION,\n    ];\n    const taskBtnIDs = [\n      id.BTN_FIRST,\n      id.BTN_TASK_PLAY_PREV,\n      id.BTN_TASK_PREV,\n      id.BTN_TASK_NEXT,\n      id.BTN_TASK_PLAY_NEXT,\n      id.BTN_LAST,\n      id.BTN_RESTART,\n      id.BTN_CLOSE,\n    ];\n    const taskBtnHelp = [\n      caption.BTN_FIRST_HELP,\n      caption.BTN_TASK_PLAY_PREV_HELP,\n      caption.BTN_TASK_PREV_HELP,\n      caption.BTN_TASK_NEXT_HELP,\n      caption.BTN_TASK_PLAY_NEXT_HELP,\n      caption.BTN_LAST_HELP,\n      caption.BTN_RESTART_HELP,\n      caption.BTN_CLOSE_HELP,\n    ];\n    const taskBtns = [];\n\n    length = taskBtnNames.length;\n    for (let i = 0; i < length; i++) {\n      taskBtns[i] = document.createElement(\"button\");\n      taskBtns[i].innerHTML = taskBtnNames[i];\n      taskBtns[i].id = taskBtnIDs[i];\n      taskBtns[i].className = classes.TASK_BTNS_MAIN;\n      taskBtns[i].setAttribute(cnst.HELP_STRING_ATTRIBUTE_NAME, taskBtnHelp[i]);\n    }\n\n    //button first\n    taskBtns[0].addEventListener(\"click\", (e) => {\n      this._task.setIdx(0);\n      this._task.showRam(id.TA_TASK_RAM, id.TASK_LBL, 0);\n      this._task.showScreen(id.TA_TASK_SCREEN, 0);\n    });\n\n    //button play prev\n    taskBtns[1].addEventListener(\"click\", (e) => {\n      const last = this._task.historySize;\n      const hIdx = this._task.idx;\n      let idx;\n      for (idx = hIdx - 1; idx >= 0; idx--) {\n        if (\n          idx < last - 1 &&\n          this._task.getRamElement(idx) !== this._task.getRamElement(idx + 1)\n        ) {\n          break;\n        }\n      }\n      idx < 0 && (idx = 0);\n      this._task.setIdx(idx);\n      this._task.showRam(id.TA_TASK_RAM, id.TASK_LBL, idx);\n      this._task.showScreen(id.TA_TASK_SCREEN, idx);\n    });\n\n    //button \"prev\"\n    taskBtns[2].addEventListener(\"click\", (e) => {\n      const hIdx = this._task.decrementIdx();\n      this._task.showRam(id.TA_TASK_RAM, id.TASK_LBL, hIdx);\n      this._task.showScreen(id.TA_TASK_SCREEN, hIdx);\n    });\n\n    //button \"next\"\n    taskBtns[3].addEventListener(\"click\", (e) => {\n      const hIdx = this._task.incrementIdx();\n      this._task.showRam(id.TA_TASK_RAM, id.TASK_LBL, hIdx);\n      this._task.showScreen(id.TA_TASK_SCREEN, hIdx);\n    });\n\n    //button play next\n    taskBtns[4].addEventListener(\"click\", (e) => {\n      const last = this._task.historySize;\n      const hIdx = this._task.idx;\n      let idx;\n      for (idx = hIdx + 1; idx < last; idx++) {\n        if (\n          idx &&\n          this._task.getRamElement(idx) !== this._task.getRamElement(idx - 1)\n        ) {\n          break;\n        }\n      }\n      idx > last - 1 && (idx = last - 1);\n      this._task.setIdx(idx);\n      this._task.showRam(id.TA_TASK_RAM, id.TASK_LBL, idx);\n      this._task.showScreen(id.TA_TASK_SCREEN, idx);\n    });\n\n    //button last\n    taskBtns[5].addEventListener(\"click\", (e) => {\n      const idx = this._task.historySize - 1;\n      this._task.setIdx(idx);\n      this._task.showRam(id.TA_TASK_RAM, id.TASK_LBL, idx);\n      this._task.showScreen(id.TA_TASK_SCREEN, idx);\n    });\n\n    //button \"restart\"\n    taskBtns[6].addEventListener(\"click\", (e) => {\n      //creating new task (global variable)\n      this._task = new Task(\n        this._testProg.toUpperCase(),\n        this._testHist,\n        null,\n        this._options\n      );\n      this._task.showRam(id.TA_TASK_RAM, id.TASK_LBL, this._task.idx);\n      this._task.showScreen(id.TA_TASK_SCREEN, this._task.idx);\n    });\n\n    //button \"close\"\n    taskBtns[7].addEventListener(\"click\", (e) => {\n      (document.getElementById(id.TASK_CONTAINER) as HTMLDivElement).style[\n        \"display\"\n      ] = \"none\";\n      (document.getElementById(id.IDE_CONTAINER) as HTMLDivElement).style[\n        \"display\"\n      ] = \"block\";\n\n      (document.getElementById(id.EXP_BTN) as HTMLDivElement).style[\"display\"] =\n        \"inline-block\";\n    });\n\n    for (let i = 0; i < length - 1; i++) {\n      taskBtnsContainer.appendChild(taskBtns[i]);\n    }\n\n    const taskContainer = document.createElement(\"div\");\n    taskContainer.className = classes.TASK_CONTAINER_MAIN;\n    taskContainer.id = id.TASK_CONTAINER;\n\n    const taskLabel = document.createElement(\"label\");\n    taskLabel.className = classes.TASK_LBL_MAIN;\n    taskLabel.id = id.TASK_LBL;\n\n    taContainer1 = document.createElement(\"div\");\n    taContainer1.className = classes.TA_TASK_CONTAINER_MAIN;\n\n    taContainer2 = document.createElement(\"div\");\n    taContainer2.className = classes.TA_TASK_CONTAINER_MAIN;\n\n    if (window.screen.availWidth > cnst.MIN_WIDE_SCREEN_WIDTH) {\n      if (this._options[cnst.ONE_SCREEN_IDX]) {\n        taContainer1.classList.add(classes.TA_TASK_CONTAINER_LEFT_SINGLESCREEN);\n        taContainer1.appendChild(taskLabel);\n        taContainer1.appendChild(taskBtnsContainer);\n        taContainer1.appendChild(taskTextareas[0]);\n\n        taContainer2.appendChild(taskTextareas[1]);\n        taskContainer.appendChild(taContainer1);\n        taskContainer.appendChild(taContainer2);\n      } else {\n        taContainer1.classList.add(classes.TA_TASK_CONTAINER_LEFT);\n        taContainer1.appendChild(taskLabel);\n        taContainer1.appendChild(taskTextareas[0]);\n        taContainer1.appendChild(taskBtnsContainer);\n        taContainer1.appendChild(taskBtns[length - 1]);\n\n        taContainer2.appendChild(taskTextareas[1]);\n\n        taskContainer.appendChild(taContainer1);\n        taskContainer.appendChild(taContainer2);\n      }\n    } else {\n      taContainer1.classList.add(classes.TA_TASK_CONTAINER_LEFT);\n      taContainer1.appendChild(taskLabel);\n      taContainer1.appendChild(taskTextareas[0]);\n      taContainer1.appendChild(taskBtnsContainer);\n      taContainer1.style[\"width\"] = \"100%\";\n\n      taContainer2.appendChild(taskTextareas[1]);\n      taContainer2.style[\"width\"] = \"100%\";\n\n      taskContainer.appendChild(taContainer1);\n      taskContainer.appendChild(taContainer2);\n      taskContainer.appendChild(taskBtns[length - 1]);\n    }\n\n    this._options[cnst.HINTS_SHOW_IDX] &&\n      ((document.getElementById(id.TA_CODE) as HTMLTextAreaElement).value =\n        codeStr);\n    (document.getElementById(id.MAIN_CONTAINER) as HTMLDivElement).appendChild(\n      taskContainer\n    );\n\n    const expContainer = document.createElement(\"div\");\n    expContainer.className = classes.TA_CONTAINER;\n    expContainer.id = id.EXP_CONTAINER;\n    expContainer.style[\"width\"] = \"100%\";\n    expContainer.style[\"display\"] = \"none\";\n    expContainer.style[\"padding-top\" as unknown as number] = \"0.7rem\";\n\n    const expCodeHintLabel = document.createElement(\"label\");\n    expCodeHintLabel.className = classes.TASK_LBL_MAIN;\n    expCodeHintLabel.innerHTML = caption.EXP_CODE_HINT_LBL;\n\n    const taExpCodeHint = document.createElement(\"textarea\");\n    taExpCodeHint.cols = cols;\n    taExpCodeHint.className = classes.TA_MAIN;\n\n    taExpCodeHint.id = id.TA_EXP_CODE_HINT;\n    taExpCodeHint.rows = rows2;\n    taExpCodeHint.style[\"display\"] = \"block\";\n    taExpCodeHint.style[\"margin-bottom\" as unknown as number] = \"0.4rem\";\n    taExpCodeHint.style[\"padding-top\" as unknown as number] = \"0.15rem\";\n\n    const expTaskNameLabel = document.createElement(\"label\");\n    expTaskNameLabel.className = classes.TASK_LBL_MAIN;\n    expTaskNameLabel.innerHTML = caption.EXP_TASK_NAME_LBL;\n\n    const expTaskNameInput = document.createElement(\"input\");\n    expTaskNameInput.type = \"text\";\n    expTaskNameInput.size = cols;\n    expTaskNameInput.className = classes.TA_MAIN;\n    expTaskNameInput.id = id.EXP_TASK_NAME;\n    expTaskNameInput.value = \"USER LEVEL\";\n    expTaskNameInput.style[\"display\"] = \"block\";\n\n    expTaskNameInput.addEventListener(\"input\", (e: Event) => {\n      let name = (e.currentTarget as HTMLInputElement).value;\n      name.length > 20 && (name = name.slice(0, 20));\n      (e.currentTarget as HTMLInputElement).value = name;\n    });\n\n    expContainer.appendChild(expCodeHintLabel);\n    expContainer.appendChild(taExpCodeHint);\n    expContainer.appendChild(expTaskNameLabel);\n    expContainer.appendChild(expTaskNameInput);\n\n    (document.getElementById(id.MAIN_CONTAINER) as HTMLDivElement).appendChild(\n      expContainer\n    );\n\n    this.changeAllBtnsHelpStrings(this._options[cnst.HELP_SHOW_IDX]);\n\n    //set task \"textarea\" div width and height\n    taskTextareas[0].style[\"width\"] = textareas[2].style[\"width\"];\n    taskTextareas[0].style[\"height\"] = textareas[2].style[\"height\"];\n\n    if (this._musicPlayer) {\n      this._options[cnst.PLAY_MUSIC_IDX]\n        ? this._musicPlayer.play()\n        : this._musicPlayer.pause();\n    } else {\n      this._musicPlayer = new Audio(cnst.BG_MUSIC_SRC);\n      this._musicPlayer.loop = true;\n      this._musicPlayer.addEventListener(\"canplay\", (e: Event) => {\n        this._options[cnst.PLAY_MUSIC_IDX]\n          ? (this._musicPlayer as HTMLAudioElement).play()\n          : (this._musicPlayer as HTMLAudioElement).pause();\n      });\n    }\n  }\n\n  get musicPlayer() {\n    return this._musicPlayer;\n  }\n}\n","export const REPO_NAME = \"/graybox\";\nexport const ABSOLUTE_PATH = \"https://jsconst.github.io\";\n//for localhost debugging\n//export const REPO_NAME = \"\";\n\nexport const SIMB_SHOW_IDX = 0;\nexport const HEX_SHOW_IDX = 1;\nexport const HINTS_SHOW_IDX = 2;\nexport const HELP_SHOW_IDX = 3;\nexport const PLAY_MUSIC_IDX = 4;\nexport const ONE_SCREEN_IDX = 5;\n\nexport const SIMB_SHOW_INIT_VAL = 1;\nexport const HEX_SHOW_INIT_VAL = 0;\nexport const HINTS_SHOW_INIT_VAL = 1;\nexport const HELP_SHOW_INIT_VAL = 1;\nexport const PLAY_MUSIC_INIT_VAL = 0;\nexport const ONE_SCREEN_INIT_VAL = 1;\n\nexport const MAX_STEP_COUNT = 100000;\n\nexport const HELP_PAGE_SRC = `${REPO_NAME}/yBasic.html`;\nexport const LS_OPT_ITEM = \"options\";\nexport const HELP_STRING_ATTRIBUTE_NAME = \"helpString\";\nexport const DISPLAY_ATTRIBUTE_NAME = \"visible\";\nexport const IDX_ATTRIBUTE_NAME = \"idx\";\nexport const LS_LEVEL_ITEM = \"level\";\n\nexport const MIN_WIDE_SCREEN_WIDTH = 1659;\n\nexport const BG_MUSIC_SRC = `${REPO_NAME}/bgmusic.mp3`;\n\n//export const LEVELS_SRV = \"http://185.117.153.193:43210/levels\";\n//CORS proxy\nexport const LEVELS_SRV = `https://api.allorigins.win/get?url=${encodeURIComponent(\n  \"http://185.117.153.193:43210/levels\"\n)}&rand=${Math.random()}`;\n","export const TA_MAIN = \"ta-main-class\";\nexport const TA_RAM = \"ta-ram-class\";\nexport const MAIN_CONTAINER = \"main-container-class\";\nexport const BTN_MAIN = \"btns-main-class\";\nexport const BTN_LEFT = \"btns-container-class btns-container-left-class\";\nexport const BTN_RIGHT = \"btns-container-class btns-container-right-class\";\n\nexport const OPTIONS_CONTAINER = \"options-container-class\";\n\nexport const OPTIONS_LBL = \"options-lbl-class\";\nexport const OPTIONS_CBX = \"options-cbx-class\";\nexport const IDE_CONTAINER = \"ide-container-class\";\nexport const MENUBAR = \"menu-bar-class\";\n\nexport const MENUBAR_LBL = \"menu-bar-lbl-class\";\n\nexport const MAIN_CONTAINER_SHOWED_OPTIONS =\n  \"main-container-class-showed-options\";\n\nexport const MENU_BTN = \"menu-btn-class\";\n\nexport const HELP_PAGE_MAIN = \"help-page-main-class\";\nexport const HELP_SCREEN_MAIN = \"help-screen-main-class\";\n\nexport const TA_CONTAINER = \"ta-container-class\";\n\nexport const TA_TASK_MAIN = \"ta-task-main-class\";\nexport const TA_TASK_RAM = \"ta-task-ram-class\";\n\nexport const TASK_BTNS_CONTAINER_MAIN = \"task-btns-main-container\";\n\nexport const TASK_BTNS_MAIN = \"btns-main-class\";\n\nexport const TASK_CONTAINER_MAIN = \"task-container-main-class\";\n\nexport const TASK_LBL_MAIN = \"task-label-class\";\n\nexport const TA_TASK_CONTAINER_MAIN = \"ta-task-container-class\";\nexport const TA_TASK_CONTAINER_LEFT_SINGLESCREEN =\n  \"ta-task-container-class-left-onescreen\";\nexport const TA_TASK_CONTAINER_LEFT = \"ta-task-container-class-left\";\n\nexport const PICK_LEVEL_SELECTOR = \"pick-level-selector-class\";\nexport const PICK_LEVEL_SELECTOR_OPTIONS = \"pick-level-selector-options-class\";\n\nexport const LOGO = \"logo-container-class\";\n","export const BTN_RUN_CAPTION = \"run\";\nexport const BTN_STEP_CAPTION = \"step\";\nexport const BTN_RST_CAPTION = \"reset\";\nexport const BTN_CODE_CAPTION = \"code\";\nexport const BTN_SCREEN_CAPTION = \"screen\";\nexport const BTN_SHOW_CAPTION = \"show\";\nexport const BTN_CHECK_CAPTION = \"check\";\nexport const BTN_NEXT_CAPTION = \"next\";\nexport const BTN_RAM_CAPTION = \"ram\";\nexport const BTN_INPUT_CAPTION = \"input\";\nexport const BTN_HIDE_CAPTION = \"hide\";\n\nexport const BTN_RUN_HELP = \"Run to the end of program\";\nexport const BTN_STEP_HELP = \"Step onto the next codeline\";\nexport const BTN_RST_HELP = \"Go to program start\";\nexport const BTN_CODE_HELP = \"Switch program text and RAM\";\nexport const BTN_SCREEN_HELP = \"Switch output window and virtual console\";\nexport const BTN_SHOW_HELP = \"Show or hide the task\";\nexport const BTN_CHECK_HELP = \"Compare execution of your program with the task\";\nexport const BTN_NEXT_HELP = \"Go to the next level\";\n\nexport const LBL_SIMB_TXT =\n  \"Show characters instead of numbers for string variables in RAM\";\nexport const LBL_HEX_TXT = \"Show numbers in RAM by a hexadecimal format\";\nexport const LBL_HINTS_TXT = \"Show code hints\";\nexport const LBL_HELP_TXT = \"Show hints about button actions\";\nexport const LBL_PLAY_MUSIC_TXT = \"Background music\";\nexport const LBL_SCREEN_TXT =\n  \"Single screen for code and task (wide screens only)\";\n\nexport const IDE_RELOADED_TXT =\n  \"The IDE will be reloaded with the new settings\";\n\nexport const HELP_CAPTION = \"F1\";\nexport const HELP_BTN_HINT_TXT = \"Show help\";\n\nexport const EXP_CAPTION = \"&#9658\";\nexport const EXP_BTN_HINT_TXT = \"Export a user-level link to the clipboard\";\n\nexport const OPTIONS_CAPTION = \"&#9776\";\nexport const OPTIONS_CAPTION_CODE = 9776;\nexport const OPTIONS_BNT_HINT_TXT = \"Show options\";\n\nexport const NO_CAPTION = \"&#10008\";\nexport const NO_CAPTION_CODE = 10008;\n\nexport const YES_CAPTION = \"&#10004\";\nexport const YES_CAPTION_CODE = 10004;\n\nexport const BTN_FIRST_CAPTION = \"[<\";\nexport const BTN_TASK_PLAY_PREV_CAPTION = \"<<\";\nexport const BTN_TASK_PREV_CAPTION = \"<\";\nexport const BTN_TASK_NEXT_CAPTION = \">\";\nexport const BTN_TASK_PLAY_NEXT_CAPTION = \">>\";\nexport const BTN_LAST_CAPTION = \">]\";\nexport const BTN_RESTART_CAPTION = \"restart\";\nexport const BTN_CLOSE_CAPTION = \"close\";\n\nexport const BTN_FIRST_HELP = \"Go to the first snapshot\";\nexport const BTN_TASK_PLAY_PREV_HELP = \"Go to previous RAM cell change\";\nexport const BTN_TASK_PREV_HELP = \"Go to the previous snapshot\";\nexport const BTN_TASK_NEXT_HELP = \"Go to the next snapshot\";\nexport const BTN_TASK_PLAY_NEXT_HELP = \"Go to next RAM cell change\";\nexport const BTN_LAST_HELP = \"Go to the last snapshot\";\nexport const BTN_RESTART_HELP = \"Reset the task to its initial state\";\nexport const BTN_CLOSE_HELP = \"Close task screen\";\n\nexport const EXP_CODE_HINT_LBL =\n  \"Code hint for your level (change here what you want)\";\nexport const EXP_TASK_NAME_LBL = \"Level name (max 20 characters)\";\n","import * as msg from \"../consts/messages\";\nimport * as cnst from \"../consts/const\";\nimport { Parser } from \"../lang/parser\";\nimport { Environment } from \"../lang/environment\";\nimport { InputHistory } from \"../lang/iHistory\";\nimport { Executor } from \"../lang/executor\";\n\nexport class ProgramRunner {\n  private _consoleId: string;\n  private _parser: Parser;\n  private _exec: Executor;\n\n  private _inputHistory: InputHistory;\n  private _env: Environment;\n\n  constructor(str: string, iHist: InputHistory | null, consoleId: string) {\n    this._consoleId = consoleId;\n    this._parser = new Parser();\n    this._exec = new Executor();\n\n    if (iHist) {\n      this._inputHistory = iHist;\n    } else {\n      this._inputHistory = new InputHistory();\n    }\n    this._env = new Environment(256, 28, str.split(\"\\n\"), this._inputHistory);\n  }\n\n  run() {\n    let counter = 0;\n    while (counter < cnst.MAX_STEP_COUNT) {\n      if (\n        this._exec.execute(\n          this._parser.parse(this.env.getCurrentProgramLine(), this._env),\n          this._env\n        ) !== 0 /*null*/\n      ) {\n        if (!this._env.setNextLP()) {\n          throw new Error(msg.makeMsg(msg.MESSAGES.EXE_COMPLITED_MSG));\n        }\n      }\n      counter++;\n    }\n    throw new Error(\n      msg.makeMsg(msg.MESSAGES.EXE_LOOPING_MSG, cnst.MAX_STEP_COUNT)\n    );\n  }\n\n  step() {\n    (document.getElementById(this._consoleId) as HTMLTextAreaElement).style[\n      \"color\"\n    ] = \"green\";\n    (document.getElementById(this._consoleId) as HTMLTextAreaElement).value =\n      `EXECUTED LINE:\\n${this.env.getCurrentProgramLine()}`.toLowerCase();\n    if (\n      this._exec.execute(\n        this._parser.parse(this._env.getCurrentProgramLine(), this.env),\n        this._env\n      ) !== 0 /*null*/\n    ) {\n      if (!this.env.setNextLP()) {\n        throw new Error(\"EXECUTION COMPLITED SUCCESSFULLY!\");\n      }\n    }\n  }\n\n  get env() {\n    return this._env;\n  }\n}\n","import * as msg from \"../consts/messages\";\nimport { InputHistory } from \"./iHistory\";\nimport { Variable } from \"./variable\";\nimport { ReturnPointer } from \"./rPointer\";\n\nexport class Environment {\n  private _lp: string;\n  private _program: string[];\n  private _lineNumbers: string[];\n  private _inputHistory: InputHistory;\n\n  private _ramSize: number;\n  private _varCount: number;\n  private _variables: { [index: string]: Variable };\n\n  private _stack: { [index: string]: ReturnPointer };\n\n  private _currentStackAddr: number;\n  private _currentHeapAddr: number;\n\n  private _screen: { [index: string]: string };\n  private _screenLine: number;\n\n  constructor(\n    ramSize: number,\n    varCount: number,\n    program: string[],\n    inputHistory: InputHistory\n  ) {\n    this._lp = msg.IDE_NA;\n\n    let emptyFlag = 1;\n\n    //check that the all program lines had sequental numbering and program is not empty\n    for (let i = 0; i < program.length; i++) {\n      const trimmedStr = program[i].trim();\n      if (trimmedStr.length === 0) {\n        continue;\n      }\n\n      trimmedStr[trimmedStr.length - 1] === \";\" &&\n        msg.throwError(this._lp, msg.MESSAGES.IDE_SEMICOLON_ERR);\n      emptyFlag = 0;\n\n      const number = Number(program[i].trim().split(\" \")[0]);\n      String(number) === \"NaN\" &&\n        msg.throwError(this._lp, msg.MESSAGES.IDE_WRONG_NUMBER_ERR);\n      if (number < 0) {\n        msg.throwError(this._lp, msg.MESSAGES.IDE_NEGATIVE_NUMBER_ERR, number);\n      }\n\n      if (i) {\n        const prev =\n          i - 1 || program[i - 1].trim().length\n            ? Number(program[i - 1].trim().split(\" \")[0])\n            : -1;\n        number <= prev &&\n          msg.throwError(\n            this._lp,\n            msg.MESSAGES.IDE_UNSEQUENTAL_NUMBER_ERR,\n            number,\n            prev\n          );\n      }\n\n      //!!! ïðîâåðèòü íåäîïóñòèìûå ñèìâîëû ^,&,~ è ò.ä âåçäå êðîìå ñòðîêîâûõ êîíñòàíò\n      //!!! çàìåíèòü AND NOT OR XOR íà & ! è ò.ä.\n\n      program[i] = trimmedStr;\n    }\n    emptyFlag && msg.throwError(this._lp, msg.MESSAGES.IDE_EMPTY_CODE_ERR);\n\n    //program - array of sorted lines\n    this._program = program.filter((el) => {\n      return el.trim().length ? true : false;\n    });\n    this._lineNumbers = this._program.map((el) => {\n      return el.split(\" \")[0];\n    });\n    //last empty line adding for viewing last step operation\n    this._lineNumbers.push(\n      this._lineNumbers[this._lineNumbers.length - 1] + \"1\"\n    );\n    this._program.push(this._lineNumbers[this._lineNumbers.length - 1]);\n\n    //line pointer (LP)\n    this._lp = this._lineNumbers[0];\n\n    //history for console inputs\n    this._inputHistory = inputHistory;\n\n    //local RAM size in bytes\n    this._ramSize = ramSize;\n    //local variables count\n    this._varCount = varCount;\n    //all knowing variables\n    this._variables = {};\n\n    //all knowing return pointers\n    this._stack = {};\n\n    //current stack and heap addresses\n    this._currentStackAddr = ramSize;\n    this._currentHeapAddr = 0;\n\n    //fake console\n    this._screen = {};\n\n    //fake console current line\n    this._screenLine = 0;\n  }\n\n  //get program line by LP\n  getCurrentProgramLine(): string {\n    return this._program[this._lineNumbers.indexOf(this._lp)];\n  }\n\n  //get empty heap address\n  getEmptyHeapAddr(size: number): number | null {\n    let currentAddr = 0;\n    for (const el in this._variables) {\n      const lastAddr = this._variables[el].address + this._variables[el].size;\n      if (lastAddr > currentAddr) {\n        currentAddr = lastAddr;\n      }\n    }\n    return currentAddr + size >= this._currentStackAddr\n      ? null\n      : (this._currentHeapAddr = currentAddr);\n  }\n\n  //create new variable\n  createVar(name: string, value: string | number) {\n    !this._varCount && msg.throwError(this._lp, msg.MESSAGES.VAR_TOO_MANY_ERR);\n    const type = name.indexOf(\"$\") >= 0 ? 1 : 0;\n    //for zero-terminated strings, length is bigger by 1 of max size for the tail zero\n    const size = type ? 9 : 1;\n    const address = this.getEmptyHeapAddr(size);\n    address === null &&\n      msg.throwError(this.lp, msg.MESSAGES.VAR_MEMORY_FULL_ERR, name);\n    if (name[name.length - 1] >= \"0\" && name[name.length - 1] <= \"7\") {\n      name in this._variables &&\n        msg.throwError(this._lp, msg.MESSAGES.VAR_DEFINED_ERR, name[0]);\n      for (const variable in this._variables) {\n        name[0] === this._variables[variable].name[0] &&\n          (name[1] === this._variables[variable].name[2] ||\n            name[2] === this._variables[variable].name[1]) &&\n          msg.throwError(this._lp, msg.MESSAGES.VAR_DEFINED_ERR, name[0]);\n      }\n      name[name.length - 1] === \"0\" && this._varCount--;\n    } else {\n      name in this._variables &&\n        msg.throwError(this._lp, msg.MESSAGES.VAR_DEFINED_ERR, name[0]);\n      name[0] in this._variables &&\n        msg.throwError(this._lp, msg.MESSAGES.VAR_DEFINED_ERR, name[0]);\n      name[0] + \"$\" in this._variables &&\n        msg.throwError(this._lp, msg.MESSAGES.VAR_DEFINED_ERR, name[0]);\n      this._varCount--;\n    }\n    !type &&\n      typeof value === \"number\" &&\n      (value = String(((value & 0xff) ^ 0x80) - 0x80));\n    this._variables[name] = new Variable(\n      name,\n      value,\n      address as number,\n      type,\n      size\n    );\n  }\n\n  //get empty stack address\n  getEmptyStackAddr(size: number): number | null {\n    let currentAddr = this._ramSize;\n    for (const el in this.stack) {\n      const lastAddr = this._stack[el].address;\n      lastAddr < currentAddr && (currentAddr = lastAddr);\n    }\n    return currentAddr - size <= this._currentHeapAddr\n      ? null\n      : (this._currentStackAddr = currentAddr - size);\n  }\n\n  //create new return pointer\n  createRP(value: string): void {\n    const size = 2;\n    const address = this.getEmptyStackAddr(size);\n    address === null && msg.throwError(this.lp, msg.MESSAGES.VAR_POINTER_ERR);\n    this._stack[String(address)] = new ReturnPointer(\n      value,\n      address as number,\n      size\n    );\n  }\n\n  //delete last return pointer\n  deleteRP = (): string | null => {\n    let currentAddr = this._ramSize;\n    for (const el in this.stack) {\n      const lastAddr = this._stack[el].address;\n      lastAddr < currentAddr && (currentAddr = lastAddr);\n    }\n    if (currentAddr !== this._ramSize) {\n      const value = this._stack[String(currentAddr)].value;\n      delete this._stack[String(currentAddr)];\n      return value;\n    }\n    return null;\n  };\n\n  //set LP to next command line\n  setNextLP(): string | null {\n    return this._lineNumbers.indexOf(this._lp) + 1 >\n      this._lineNumbers.length - 1\n      ? null\n      : (this._lp = this._lineNumbers[this._lineNumbers.indexOf(this._lp) + 1]);\n  }\n\n  //PRINT(LN) to console\n  screenPrint(msg: string, ln: number): void {\n    this._screen[String(this._screenLine)] = this._screen[\n      String(this._screenLine)\n    ]\n      ? (this._screen[String(this._screenLine)] += String(msg))\n      : (this._screen[String(this._screenLine)] = String(msg));\n    while (this._screen[String(this._screenLine)].length > 80) {\n      this._screen[String(this._screenLine + 1)] =\n        this._screen[String(this._screenLine)].slice(80);\n      this._screen[String(this._screenLine)] = this._screen[\n        String(this._screenLine)\n      ].slice(0, 80);\n      this._screenLine++;\n    }\n    //if PRINTLN command then adding \\n\n    if (ln) {\n      this._screenLine++;\n    }\n  }\n\n  setVariableByName(name: string, variable: Variable): void {\n    this._variables[name] = variable;\n  }\n\n  getVariableByName(name: string): Variable | null {\n    return this._variables[name] ? this._variables[name] : null;\n  }\n\n  setLp(val: string): string | null {\n    return this._lineNumbers.indexOf(String(val)) >= 0\n      ? (this._lp = String(val))\n      : null;\n  }\n\n  //getters\n  get variables() {\n    return this._variables;\n  }\n  get stack() {\n    return this._stack;\n  }\n  get lp() {\n    return this._lp;\n  }\n  get program() {\n    return this._program;\n  }\n  get inputHistory() {\n    return this._inputHistory;\n  }\n  get ramSize() {\n    return this._ramSize;\n  }\n  get screen() {\n    return this._screen;\n  }\n  get screenLine() {\n    return this._screenLine;\n  }\n}\n","export class Variable {\n  //variable name\n  private _name: string;\n  //variable value in string format\n  private _value: string;\n  //variable address in memory\n  private _address: number;\n  //variable type (0 - number, 1 - string)\n  private _type: number;\n  //variable size\n  private _size: number;\n\n  constructor(\n    name: string,\n    value: number | string,\n    address: number,\n    type: number,\n    size: number\n  ) {\n    this._name = name;\n    this._address = address;\n    this._type = type;\n    this._size = size;\n\n    !type &&\n      typeof value === \"number\" &&\n      (value = ((value & 0xff) ^ 0x80) - 0x80);\n    this._value = String(value);\n  }\n\n  //setters\n  set name(name: string) {\n    this._name = name;\n  }\n  get name() {\n    return this._name;\n  }\n  set value(val: number | string) {\n    !this._type &&\n      typeof val === \"number\" &&\n      (val = ((val & 0xff) ^ 0x80) - 0x80);\n    this._value = String(val);\n  }\n  get value() {\n    return this._value;\n  }\n  set address(addr: number) {\n    this._address = addr;\n  }\n  get address() {\n    return this._address;\n  }\n  set type(type: number) {\n    this._type = type;\n  }\n  get type() {\n    return this._type;\n  }\n  set size(size: number) {\n    this._size = size;\n  }\n  get size() {\n    return this._size;\n  }\n}\n","export class ReturnPointer {\n  private _value: string;\n  private _address: number;\n  private _size: number;\n\n  constructor(value: string, address: number, size: number) {\n    this._value = value;\n    this._address = address;\n    this._size = size;\n  }\n\n  set value(val: string) {\n    this._value = val;\n  }\n  get value() {\n    return this._value;\n  }\n  set address(addr: number) {\n    this._address = addr;\n  }\n  get address() {\n    return this._address;\n  }\n  set size(size: number) {\n    this._size = size;\n  }\n  get size() {\n    return this._size;\n  }\n}\n","import * as msg from \"../consts/messages\";\nimport { Visualizer } from \"./visualizer\";\nimport { Task } from \"./task\";\n\nexport class Comparer {\n  _options: number[];\n\n  constructor(options: number[]) {\n    this._options = options;\n  }\n\n  compare(\n    strProg1: string,\n    strProg2: string,\n    strHist: string,\n    errConsoleName: string,\n    visualizer: Visualizer\n  ) {\n    const iHist = visualizer.getInputHistory(null, strHist);\n    const task = new Task(strProg1.toUpperCase(), null, iHist, this._options);\n    let prog: Task | null = null as unknown as Task;\n    try {\n      prog = new Task(\n        strProg2.toUpperCase(),\n        null,\n        iHist.resetInputHistory(),\n        this._options\n      );\n    } catch (e) {\n      if (\n        (e as Error).message !== msg.makeMsg(msg.MESSAGES.EXE_COMPLITED_MSG)\n      ) {\n        (document.getElementById(errConsoleName) as HTMLTextAreaElement).style[\n          \"color\"\n        ] = \"red\";\n        (document.getElementById(errConsoleName) as HTMLTextAreaElement).value =\n          (e as Error).message.indexOf(\n            msg.makeMsg(msg.MESSAGES.PARSE_INPUT_EMPTY_ERR)\n          ) >= 0\n            ? msg.makeMsg(msg.MESSAGES.UI_COMPARE_INPUT_ERR)\n            : msg.makeMsg(\n                msg.MESSAGES.UI_COMPARE_ERR,\n                (e as Error).message.toLowerCase()\n              );\n        return 0;\n      }\n    }\n\n    const taskHistSize = task.historySize;\n    const progHistSize = prog.historySize;\n\n    const taskScreen = task\n      .getScreenElement(taskHistSize - 1)\n      .trim()\n      .split(\"\\n\");\n    const progScreen = prog\n      .getScreenElement(progHistSize - 1)\n      .trim()\n      .split(\"\\n\");\n    const length = taskScreen.length;\n    if (length !== progScreen.length) {\n      (document.getElementById(errConsoleName) as HTMLTextAreaElement).style[\n        \"color\"\n      ] = \"red\";\n      (document.getElementById(errConsoleName) as HTMLTextAreaElement).value =\n        msg.makeMsg(msg.MESSAGES.UI_COMPARE_SCREEN_ERR);\n      return 0;\n    }\n\n    for (let cnt = 0; cnt < length; cnt++) {\n      if (taskScreen[cnt].trim() != progScreen[cnt].trim()) {\n        (document.getElementById(errConsoleName) as HTMLTextAreaElement).style[\n          \"color\"\n        ] = \"red\";\n        (document.getElementById(errConsoleName) as HTMLTextAreaElement).value =\n          msg.makeMsg(msg.MESSAGES.UI_COMPARE_SCREEN_LINE_ERR, cnt + 1);\n        return 0;\n      }\n    }\n\n    task.setIdx(taskHistSize - 1);\n    prog.setIdx(progHistSize - 1);\n\n    if (task.getRamElement(task.idx) !== prog.getRamElement(prog.idx)) {\n      (document.getElementById(errConsoleName) as HTMLTextAreaElement).style[\n        \"color\"\n      ] = \"red\";\n      (document.getElementById(errConsoleName) as HTMLTextAreaElement).value =\n        msg.makeMsg(msg.MESSAGES.UI_COMPARE_FINALLY_RAM_ERR);\n      return 0;\n    }\n\n    while (true) {\n      let hIdx = task.idx;\n      let idx;\n      for (idx = hIdx - 1; idx >= 0; idx--) {\n        if (\n          idx < taskHistSize - 1 &&\n          task.getRamElement(idx) !== task.getRamElement(idx + 1)\n        ) {\n          break;\n        }\n      }\n      idx < 0 && (idx = 0);\n      task.setIdx(idx);\n\n      hIdx = prog.idx;\n      for (idx = hIdx - 1; idx >= 0; idx--) {\n        if (\n          idx < progHistSize - 1 &&\n          prog.getRamElement(idx) !== prog.getRamElement(idx + 1)\n        ) {\n          break;\n        }\n      }\n      idx < 0 && (idx = 0);\n      prog.setIdx(idx);\n\n      if (task.getRamElement(task.idx) !== prog.getRamElement(prog.idx)) {\n        (document.getElementById(errConsoleName) as HTMLTextAreaElement).style[\n          \"color\"\n        ] = \"red\";\n        (document.getElementById(errConsoleName) as HTMLTextAreaElement).value =\n          msg.makeMsg(msg.MESSAGES.UI_COMPARE_RAM_ERR);\n        return 0;\n      }\n\n      if (!task.idx || !prog.idx) {\n        if (task.idx || prog.idx) {\n          (\n            document.getElementById(errConsoleName) as HTMLTextAreaElement\n          ).style[\"color\"] = \"red\";\n          (\n            document.getElementById(errConsoleName) as HTMLTextAreaElement\n          ).value = msg.makeMsg(msg.MESSAGES.UI_COMPARE_RAM_ERR);\n          return 0;\n        }\n        break;\n      }\n    }\n    return 1;\n  }\n}\n","import * as msg from \"../consts/messages\";\nimport * as cnst from \"../consts/const\";\nimport { InputHistory } from \"../lang/iHistory\";\nimport { Parser } from \"../lang/parser\";\nimport { Executor } from \"../lang/executor\";\nimport { Environment } from \"../lang/environment\";\nimport { Visualizer } from \"./visualizer\";\n\nexport class Task {\n  private _screenHistory: { [index: string]: string };\n  private _ramHistory: { [index: string]: string };\n  private _historySize: number;\n  private _historyIdx: number;\n\n  savedRamState: string | null;\n\n  constructor(\n    strProg: string,\n    strInputHist: string | null,\n    inputHist: InputHistory | null,\n    options: number[]\n  ) {\n    const parser = new Parser();\n    const exec = new Executor();\n\n    const visualizer = new Visualizer();\n    const inputHistory =\n      inputHist !== null\n        ? inputHist\n        : visualizer.getInputHistory(null, strInputHist as string);\n\n    const env = new Environment(256, 28, strProg.split(\"\\n\"), inputHistory);\n\n    this._screenHistory = {};\n    this._ramHistory = {};\n    this._historySize = 0;\n    this._historyIdx = 0;\n\n    let counter = 0;\n    while (true) {\n      try {\n        if (counter >= cnst.MAX_STEP_COUNT) {\n          throw new Error(\n            msg.makeMsg(msg.MESSAGES.EXE_LOOPING_MSG, cnst.MAX_STEP_COUNT)\n          );\n        }\n\n        this._screenHistory[String(this._historySize)] = visualizer.showScreen(\n          null,\n          env.screen,\n          env.screenLine,\n          25\n        );\n        this._ramHistory[String(this._historySize)] = visualizer.showRam(\n          null,\n          env.variables,\n          env.stack,\n          env.ramSize,\n          options[cnst.SIMB_SHOW_IDX],\n          options[cnst.HEX_SHOW_IDX]\n        );\n        this._historySize++;\n\n        if (\n          exec.execute(parser.parse(env.getCurrentProgramLine(), env), env) !==\n          0\n        ) {\n          if (!env.setNextLP()) {\n            throw new Error(msg.makeMsg(msg.MESSAGES.EXE_COMPLITED_MSG));\n          }\n        }\n        counter++;\n      } catch (e) {\n        if (\n          (e as Error).message !== msg.makeMsg(msg.MESSAGES.EXE_COMPLITED_MSG)\n        ) {\n          throw new Error((e as Error).message);\n        }\n        break;\n      }\n    }\n\n    this.savedRamState = null;\n  }\n\n  incrementIdx() {\n    if (this._historyIdx < this._historySize - 1) {\n      this._historyIdx++;\n    }\n    return this._historyIdx;\n  }\n\n  decrementIdx() {\n    if (this._historyIdx) {\n      this._historyIdx--;\n    }\n    return this._historyIdx;\n  }\n\n  showScreen(taName: string, idx: number) {\n    const textarea = document.getElementById(taName) as HTMLTextAreaElement;\n    textarea.value = this._screenHistory[String(idx)];\n  }\n\n  showRam(taName: string, lblName: string, idx: number) {\n    (\n      document.getElementById(lblName) as HTMLLabelElement\n    ).textContent = `SNAPSHOT ${idx + 1} of ${this._historySize}`;\n    const textarea = document.getElementById(taName) as HTMLTextAreaElement;\n    textarea.innerHTML = `<pre>${\n      this.savedRamState\n        ? Visualizer.prototype.ramVisualizationModify(\n            this.savedRamState,\n            (this.savedRamState = this._ramHistory[String(idx)])\n          )\n        : (this.savedRamState = this.ramHistory[String(idx)])\n    }</pre>`;\n  }\n\n  getRamElement(idx: number) {\n    return this._ramHistory[String(idx)];\n  }\n\n  getScreenElement(idx: number) {\n    return this._screenHistory[String(idx)];\n  }\n\n  setIdx(idx: number): number {\n    return (this._historyIdx = idx);\n  }\n\n  //getters\n  get historySize() {\n    return this._historySize;\n  }\n  get screenHistory() {\n    return this._screenHistory;\n  }\n  get ramHistory() {\n    return this._ramHistory;\n  }\n  get idx() {\n    return this._historyIdx;\n  }\n}\n","export const logo = `\n\n                                                                          \n  _|_|_|  _|_|_|      _|_|    _|      _|  _|_|_|      _|_|    _|      _|  \n_|        _|    _|  _|    _|    _|  _|    _|    _|  _|    _|    _|  _|    \n_|  _|_|  _|_|_|    _|_|_|_|      _|      _|_|_|    _|    _|      _|      \n_|    _|  _|    _|  _|    _|      _|      _|    _|  _|    _|    _|  _|    \n  _|_|_|  _|    _|  _|    _|      _|      _|_|_|      _|_|    _|      _|  `;\n","import * as cnst from \"../consts/const\";\n\nexport type TaskDescriptor = {\n  name: string;\n  codeHint: string;\n  testProg: string;\n  testHist: string;\n  checkHist: string;\n  storyText?: string;\n};\n\nexport type TaskList = {\n  text: TaskDescriptor[];\n  idx: number;\n};\n\nexport let tasks: TaskList = {\n  text: [\n    {\n      name: \"NOTHING TO DO\",\n      codeHint:\n        '0 PRINTLN \"SOMETHING ABOUT DOING NOTHING\"\\n10 LET A$\\n20 LET B\\n30 INPUT A$\\n40 INPUT B\\n50 PRINT \"VALUES IN MEMORY: \\'\"\\n60 PRINT A$\\n70 PRINT \"\\', \"\\n80 PRINTLN B',\n      testProg:\n        '0 PRINTLN \"SOMETHING ABOUT DOING NOTHING\"\\n10 LET A$\\n20 LET B\\n30 INPUT A$\\n40 INPUT B\\n50 PRINT \"VALUES IN MEMORY: \\'\"\\n60 PRINT A$\\n70 PRINT \"\\', \"\\n80 PRINTLN B',\n      testHist:\n        \"Math.random().toFixed(Math.random() * 7)\\n(Math.random() * 10) >>> 0\",\n      checkHist: `\"${Math.random().toFixed(Math.random() * 7)}\"\\n${\n        (Math.random() * 10) >>> 0\n      }`,\n      storyText: `${cnst.REPO_NAME}/story0.txt`,\n    },\n    {\n      name: \"THE END\",\n      codeHint:\n        '0 REM THIS IS AN UNFINISHED VERSION OF THE GAME\\n10 REM WITHOUT CONNECTING TO THE SERVER, ONLY ONE LEVEL IS AVAILABLE\\n20 REM FOR NOW, THAT IS ALL\\n30 PRINT \"THE END\"',\n      testProg:\n        '0 REM THIS IS AN UNFINISHED VERSION OF THE GAME\\n10 REM WITHOUT CONNECTING TO THE SERVER, ONLY ONE LEVEL IS AVAILABLE\\n20 REM FOR NOW, THAT IS ALL\\n30 PRINT \"THE END\"',\n      testHist: \"\",\n      checkHist: \"\",\n      storyText: `${cnst.REPO_NAME}/story4.txt`,\n    },\n  ],\n  idx: 0,\n};\n\nexport const getLevelsFromServer = async () => {\n  let linkTasks: TaskList | null;\n  const splittedLink = location.href.split(\"/\");\n  try {\n    linkTasks = JSON.parse(\n      atob(splittedLink[splittedLink.length - 1])\n    ) as TaskList;\n    for (const key in linkTasks.text[0]) {\n      if (!tasks.text[0][key as keyof TaskDescriptor]) {\n        throw new Error(\"Bad task list from the link\");\n      }\n    }\n  } catch (e) {\n    linkTasks = null;\n  }\n\n  if (!linkTasks) {\n    const response = await fetch(cnst.LEVELS_SRV).catch((err) => err);\n    if (response.ok) {\n      await response.json().then((data: { contents: string | null }) => {\n        data.contents && (tasks = JSON.parse(data.contents));\n      });\n    }\n  } else {\n    tasks = linkTasks;\n  }\n  return tasks;\n};\n","import \"../scss/reset.scss\";\nimport \"../scss/style.scss\";\nimport \"../scss/fonts.scss\";\n\nimport * as id from \"./consts/id\";\nimport { GUI } from \"./gui/main\";\nimport { getLevelsFromServer } from \"./game/taskList\";\n\nconst browserHistoryLength = history.length;\n\ngetLevelsFromServer().then((tasks) => {\n  let gui = new GUI(tasks);\n  gui.pickTheLevelScreenSetVisible();\n\n  window.addEventListener(\"popstate\", (e: Event) => {\n    if (document.getElementById(id.PICK_LEVEL_CONTAINER)) {\n      let pagesCount = history.length - browserHistoryLength;\n      pagesCount <= 0 && (pagesCount = 1);\n      history.go(-pagesCount);\n    } else {\n      gui.musicPlayer && gui.musicPlayer.pause();\n      const mainDiv = document.getElementById(\n        id.MAIN_CONTAINER\n      ) as HTMLDivElement;\n      mainDiv && (mainDiv.parentNode as HTMLElement).removeChild(mainDiv);\n      gui = new GUI(tasks);\n      gui.pickTheLevelScreenSetVisible();\n    }\n  });\n});\n"],"names":["$65nmJ","parcelRequire","InputHistory","constructor","default","this","el","_history","String","_histValCount","_currentHistElem","rslt","eval","$add4700f7e155979$export$2e2bcd8739ae039","obj","key","value","Object","defineProperty","enumerable","configurable","writable","$1PwY0","Executor","replaceOp","str","first","second","oddEven","isEven","split","map","join","changeHex","exec","forEach","hex","replace","slice","toLowerCase","calcExpression","expression","logic","print","env","trim","logicalXorFlag","splittedExpr","count","length","isBracketsArePair","throwError","lp","MESSAGES","EXE_BRACKETS_ERR","isResultString","i","j","tmpExpr","type","concat","quotesFlag","exprNoQuotes","push","EXE_QUOTES_ERR","indexOf","test","isNumberConst","allVars","filter","getVariableByName","EXE_NOT_DEFINED_ERR","isTypesAreMixed","EXE_MIXED_TYPES_ERR","idx","preffixStr","exprRslt","e","EXE_BAD_EXPR_ERR","EXE_ZERO_DIV_ERR","rsltType","Boolean","substring","$cy6T4","ExpressionResult","execute","cmd","setNextLP","Error","makeMsg","EXE_COMPLITED_MSG","cmdName","name","operand","exprResult","initValue","PARSE_LET_STR_NAME_ERR","PARST_LET_STR_RSLT_ERR","PARSE_LET_NUM_NAME_ERR","PARSE_LET_NUM_RSLT_ERR","createVar","operand1","initValue1","PARSE_DIM_STR_NAME_ERR","PARSE_DIM_NUM_NAME_ERR","exprResult1","PARSE_DIM_NUM_RSLT_ERR","arraySize","PARSE_DIM_SIZE_ERR","PARSE_DIM_ZERO_SIZE_ERR","operand2","exprResult2","idxStart","idxEnd","lastIndexOf","arrIdxExprResult","PARSE_ASSIGN_IDX_ERR","PARSE_ASSIGN_STR_NAME_ERR","PARSE_ASSIGN_STR_RSLT_ERR","PARSE_ASSIGN_NUM_NAME_ERR","PARSE_ASSIGN_NUM_RSLT_ERR","PARSE_ASSIGN_NOT_DEFINED_ERR","operand3","exprResult3","PARSE_IF_NOT_BOOL_ERR","ifElse","PARSE_IF_MANY_ELSE_ERR","$khd7x","Parser","parse","exprResult4","PARSE_GOTO_NOT_NUM_ERR","setLp","PARSE_GOTO_LINE_UNKNOWN_ERR","exprResult5","rp","PARSE_GOSUB_NOT_NUM_ERR","PARSE_GOSUB_LINE_UNKNOWN_ERR","createRP","rp1","deleteRP","PARSE_RETURN_ERR","exprResult6","PARSE_PRINT_ERR","screenPrint","operand4","histVal","inputHistory","getNextInputValue","PARSE_INPUT_EMPTY_ERR","inputResult","exprResult7","idxStart1","idxEnd1","arrIdxExprResult1","$8d59fb58e2b2667f$export$a76af8432bee6b75","$8d59fb58e2b2667f$export$af7faffe10421f14","$8d59fb58e2b2667f$export$11e37a699a9941eb","args","$8d59fb58e2b2667f$export$8bf7aba4a9e09055","line","$202509b2446ccd7d$export$6629eb483e9e60bb","_rslt","_type","$f35fd7249d3a3dc3$export$7acfa6ed01010e37","splittedStr","command","trimmedStr","CMD_END_ERR","$iThXd","Command","CMD_LET_ERR","CMD_DIM_ERR","CMD_IF_ERR","CMD_MANY_THEN_ERR","CMD_VAR_OMIT_ERR","CMD_VAR_MANY_ERR","$ff92218b9ba5fd8a$export$cc7e12c76513e857","_name","_operand","expr","_expression","$ePye1","Visualizer","showNeedTextArea","textareas","num","textareaEls","document","getElementById","style","showRam","taName","vars","stack","ramSize","simb","cellToStr","pref","suf","fromCharCode","toString","ram","Array","val","i1","address","charCodeAt","Number","el1","val1","i2","savedRamState","textarea","innerHTML","changeShowedRamState","ta","newState","ramVisualizationModify","textContent","showScreen","screen","lastScreenLine","rows","getInputHistory","inputHist","jsCode","jsCodeFlag","jsCodeLine","linesCount","esc","toUpperCase","result","addInputHistoryElement","oldState","stateLength","oldLine","newLine","lineLength","space","$ce5a8e3f87c7d490$export$28c2b0762d091ba6","$ce5a8e3f87c7d490$export$371ef37fa321884f","$ce5a8e3f87c7d490$export$327d14f24dfc4147","$ce5a8e3f87c7d490$export$df7f571374197f88","$ce5a8e3f87c7d490$export$33c85ba439312d6f","$ce5a8e3f87c7d490$export$927803ad1024d9a6","$ce5a8e3f87c7d490$export$d570339b234d455c","$ce5a8e3f87c7d490$export$99e87e8ef50b5e18","$ce5a8e3f87c7d490$export$e4f8057265c3f79b","$ce5a8e3f87c7d490$export$86e6403604fb3750","$ce5a8e3f87c7d490$export$f8d3abd93de48042","$ce5a8e3f87c7d490$export$7d3ff43980ae7480","$ce5a8e3f87c7d490$export$4512435ff607e5cb","$ce5a8e3f87c7d490$export$c8dfda774901999f","$ce5a8e3f87c7d490$export$89987ff3b751fc02","$ce5a8e3f87c7d490$export$7d2a60ae956ae38d","$ce5a8e3f87c7d490$export$e850063a4cad154e","$ce5a8e3f87c7d490$export$7f6674414833bf59","$ce5a8e3f87c7d490$export$e860b5ca0af434ba","$ce5a8e3f87c7d490$export$41326a26b7420fc4","$ce5a8e3f87c7d490$export$14a6eca02a21e574","$ce5a8e3f87c7d490$export$e877ec5f53f627d8","$ce5a8e3f87c7d490$export$4f072ecaef317163","$ce5a8e3f87c7d490$export$51237b24af63bf58","$ce5a8e3f87c7d490$export$b06b7de0d99b896a","$ce5a8e3f87c7d490$export$7279c36f79beb4fe","$ce5a8e3f87c7d490$export$551b329482034dc0","$ce5a8e3f87c7d490$export$4402302c977bcdb5","$ce5a8e3f87c7d490$export$1e2a6bd1aab95f80","$ce5a8e3f87c7d490$export$89bc36a97fa49bad","$ce5a8e3f87c7d490$export$6353a413bf3804d2","$ce5a8e3f87c7d490$export$2f778a3eed7b697a","$ce5a8e3f87c7d490$export$44041cf63f5fb640","$ce5a8e3f87c7d490$export$8833ac90f2a7fa6e","$ce5a8e3f87c7d490$export$827c6c7176a3b3d0","$ce5a8e3f87c7d490$export$cce1f11fbf8e30ba","$ce5a8e3f87c7d490$export$1d7ddb5dc30f8d3e","$ce5a8e3f87c7d490$export$388ca33b14040753","$ce5a8e3f87c7d490$export$67742940583f4620","$ce5a8e3f87c7d490$export$42d79bb441c4a097","$ce5a8e3f87c7d490$export$8f7ca19bd3fc4916","$ce5a8e3f87c7d490$export$7d98edd8b168f415","$ce5a8e3f87c7d490$export$1c9f6cd1e9080c86","$ce5a8e3f87c7d490$export$36fa8892e3ea7758","$ce5a8e3f87c7d490$export$a97578dc13b049c6","$ce5a8e3f87c7d490$export$704ec54148208c4e","$ce5a8e3f87c7d490$export$52e1adcf49d791e9","$80a7185f1b12fcf6$export$877d2e60ed14687b","$80a7185f1b12fcf6$export$6b0fd4add13cce87","$80a7185f1b12fcf6$export$bffd1448e7139fbc","$80a7185f1b12fcf6$export$23b5b677daa231ef","$80a7185f1b12fcf6$export$f86d3e0119f96c79","$80a7185f1b12fcf6$export$1618d19aa3965a9f","$80a7185f1b12fcf6$export$8d8c49e53096b872","$80a7185f1b12fcf6$export$89c1c57e8499d6c7","$80a7185f1b12fcf6$export$a45ba997d9dbcce4","$80a7185f1b12fcf6$export$c0a30c39999311f7","$80a7185f1b12fcf6$export$b6fa0860f8a92b83","$80a7185f1b12fcf6$export$d1869ece8de7139b","$80a7185f1b12fcf6$export$9a6340af356ed304","$80a7185f1b12fcf6$export$94778791bcef6abb","$80a7185f1b12fcf6$export$d4543a7e4d626237","$80a7185f1b12fcf6$export$8c80b3bf495394d4","$80a7185f1b12fcf6$export$8a505e3c5489ae8c","$80a7185f1b12fcf6$export$a7cdc16ec1450e3e","$80a7185f1b12fcf6$export$ca85d078caf418f6","$80a7185f1b12fcf6$export$834d70e3172927f4","$80a7185f1b12fcf6$export$67a549e2c7f2e462","$80a7185f1b12fcf6$export$93eb3b95c3a0bcb7","$80a7185f1b12fcf6$export$da497357ccbe0437","$80a7185f1b12fcf6$export$79e7edab2c91a3eb","encodeURIComponent","Math","random","$7f53380b631b56b4$export$97d4536af689582","$7f53380b631b56b4$export$df7f571374197f88","$7f53380b631b56b4$export$28c2b0762d091ba6","$7f53380b631b56b4$export$2bd39f7cd5c2dfd0","$7f53380b631b56b4$export$b4303eb4acc0939c","$7f53380b631b56b4$export$2f846d0b8e98d457","$7f53380b631b56b4$export$89987ff3b751fc02","$7f53380b631b56b4$export$739d7e89b967f2dd","$7f53380b631b56b4$export$be032b39dd2ffca","$7f53380b631b56b4$export$e877ec5f53f627d8","$7f53380b631b56b4$export$a66d8fbc72902fdd","$7f53380b631b56b4$export$da32308f184f11ff","$7f53380b631b56b4$export$3d889e8fe3c778ba","$7f53380b631b56b4$export$5857ac6067d7289c","$7f53380b631b56b4$export$da4a1618017e69fe","$7f53380b631b56b4$export$adf3855dedd99b8a","$7f53380b631b56b4$export$24fad058d987aa5a","$7f53380b631b56b4$export$e3aab27f14e3cd72","$7f53380b631b56b4$export$89bc36a97fa49bad","$7f53380b631b56b4$export$f3de5bafb7b912c4","$7f53380b631b56b4$export$bb011b7beb26e088","$7f53380b631b56b4$export$59f8bc2c457f6640","$7f53380b631b56b4$export$766be7ce97dfe087","$7f53380b631b56b4$export$91a11c9ae2ab6d17","$7f53380b631b56b4$export$420fa75a7eb1391f","$7f53380b631b56b4$export$a87eed22e00d1a5e","$7f53380b631b56b4$export$c1c7780a015f390a","$7f53380b631b56b4$export$1992e2393aaa5cbd","$7f53380b631b56b4$export$83f327ecf80c6a68","$7d5af068788ac69a$export$22a200212aad8f21","$7d5af068788ac69a$export$29bddfcfdd53b1b7","$7d5af068788ac69a$export$ccb819485c1e3635","$7d5af068788ac69a$export$a6215877344e6cf2","$7d5af068788ac69a$export$d420aa72da10fa0d","$7d5af068788ac69a$export$58a4c72a47ed0bcc","$7d5af068788ac69a$export$1dc4f57ec03f45e1","$7d5af068788ac69a$export$36d7489e1c599971","$7d5af068788ac69a$export$463c1b414460781b","$7d5af068788ac69a$export$70396a4684d5bc29","$7d5af068788ac69a$export$6d11dbf839f24368","$7d5af068788ac69a$export$aee13aa4287f083c","$7d5af068788ac69a$export$84d5ea0c27b86d6a","$7d5af068788ac69a$export$59d9e6b4b6c8c134","$7d5af068788ac69a$export$23ebaa847a9e7ca0","$7d5af068788ac69a$export$a85b176b3286602a","$7d5af068788ac69a$export$30c9633a5276b9d5","$7d5af068788ac69a$export$bfb3b07968cebda5","$7d5af068788ac69a$export$88be12b294b35e7e","$7d5af068788ac69a$export$faeb9c0db3590d79","$7d5af068788ac69a$export$c27f1348b97b232f","$7d5af068788ac69a$export$596f39e58e939f82","$7d5af068788ac69a$export$739c5e5a84470ae4","$7d5af068788ac69a$export$73e0d68c55357a70","$7d5af068788ac69a$export$ecae3567a5218b0e","$7d5af068788ac69a$export$4ff45f19ec32a23c","$7d5af068788ac69a$export$6a15a4b6ace72b5e","$7d5af068788ac69a$export$d968c2bb3c5580b9","$7d5af068788ac69a$export$27c7f7cc4e927546","$7d5af068788ac69a$export$5c6e34e4091bf3bd","$7d5af068788ac69a$export$7103f248959ba22","$7d5af068788ac69a$export$ff5598c90fe4f815","$7d5af068788ac69a$export$4478013e427d4e58","$7d5af068788ac69a$export$d80be2b029b6d32c","$7d5af068788ac69a$export$aacf5cea0bbeb97c","$7d5af068788ac69a$export$b7961b76be0d964","$7d5af068788ac69a$export$10e1b42effe95014","$7d5af068788ac69a$export$9328b265a347c2a5","$7d5af068788ac69a$export$a7022fc780a3040","$7d5af068788ac69a$export$66289981ff9ad37e","$7d5af068788ac69a$export$73a4f43b362d677f","$7d5af068788ac69a$export$f42f7a16f2f40314","$7d5af068788ac69a$export$15d7a7c547d15fb9","$7d5af068788ac69a$export$ca3320226db72958","$7d5af068788ac69a$export$66bbcc3010c5ffa4","$7d5af068788ac69a$export$522da633828bd04","$7d5af068788ac69a$export$560f2f9879fee143","$7d5af068788ac69a$export$2c049e9d77233702","$7d5af068788ac69a$export$775b8769a9a89649","$7d5af068788ac69a$export$667bc830402fc11d","$7d5af068788ac69a$export$ed7c44cf3172b3da","$7d5af068788ac69a$export$5b1a71734988ec72","$7d5af068788ac69a$export$909b40b69f807fbd","$7d5af068788ac69a$export$b694e2a786bf606","$7d5af068788ac69a$export$54a6e6f3b66db0a9","$869c3363dee88979$export$c867a5c9595a1350","_value","addr","_address","size","_size","$63221d9f48226db7$export$6fcb28195bf644fe","$05d4a55d6b93b564$export$7dc6752a22ab011a","getCurrentProgramLine","_program","_lineNumbers","_lp","getEmptyHeapAddr","currentAddr","_variables","lastAddr","_currentStackAddr","_currentHeapAddr","_varCount","VAR_TOO_MANY_ERR","VAR_MEMORY_FULL_ERR","VAR_DEFINED_ERR","variable","getEmptyStackAddr","_ramSize","_stack","VAR_POINTER_ERR","msg","ln","_screen","_screenLine","setVariableByName","variables","program","_inputHistory","screenLine","varCount","IDE_NA","emptyFlag","IDE_SEMICOLON_ERR","number","IDE_WRONG_NUMBER_ERR","IDE_NEGATIVE_NUMBER_ERR","prev","IDE_UNSEQUENTAL_NUMBER_ERR","IDE_EMPTY_CODE_ERR","$5bc3089201490d9c$export$3b8d5973dd95294d","run","counter","_exec","_parser","_env","EXE_LOOPING_MSG","step","_consoleId","iHist","consoleId","$lvXTG","$d17e34ebfdec428f$export$2dea7024bcdd7731","incrementIdx","_historyIdx","_historySize","decrementIdx","_screenHistory","lblName","$6AMVq","prototype","_ramHistory","ramHistory","getRamElement","getScreenElement","setIdx","historySize","screenHistory","strProg","strInputHist","options","parser","visualizer","message","$c52f384c89afc0ad$export$6f7eded1b7c5be2f","compare","strProg1","strProg2","strHist","errConsoleName","task","_options","prog","resetInputHistory","UI_COMPARE_INPUT_ERR","UI_COMPARE_ERR","taskHistSize","progHistSize","taskScreen","progScreen","UI_COMPARE_SCREEN_ERR","cnt","UI_COMPARE_SCREEN_LINE_ERR","UI_COMPARE_FINALLY_RAM_ERR","hIdx","UI_COMPARE_RAM_ERR","$11ca10ccd29a9c5d$export$db3c28d99448dcff","$ac70ea6e92c6c6bc$export$983832d820c96993","pickTheLevelScreenSetVisible","curLevel","window","localStorage","getItem","_tasks","text","history","pushState","logoContainer","createElement","id","classList","add","pickLevelContainer","className","querySelector","appendChild","sel","addEventListener","currentTarget","opt","UI_PICK_THE_LEVEL","setAttribute","startGame","getAttribute","removeChild","btn","UI_GO_TO_THE_LEVEL","hideStoryText","_programRunner","_visualizer","_testProg","testProg","_testHist","testHist","_checkHist","checkHist","_task","createIdeGui","codeHint","storyText","src","dispatchEvent","MouseEvent","changeAllBtnsHelpStrings","visible","btnMOver","helpString","lbl","btnMOut","allBtns","querySelectorAll","onmouseover","onmouseout","cols","rows1","rows2","rows3","codeStr","mainDiv","parentNode","tareaIDs","readOnly","tabIndex","btnNames","btnIDs","btnHelp","btns","btnsContainer","btnsDebugContainer","click","e1","availWidth","UI_CONGRATULATIONS_MSG","oldLevel","newLevel","setItem","i3","optionsContainer","labelTexts","labels","cbxIds","cbxs","i4","cbxContainer","ideContainer","menuBar","optSaveMOver","optSaveMOut","optionsWarningLbl","optionsBtn","btnCaption","checked","helpBtn","helpBtn1","removeEventListener","remove","JSON","stringify","taskContainer","ideContainer1","taskContainer1","expBtn","userTaskList","userTaskBase64","btoa","navigator","clipboard","writeText","then","UI_LINK_IN_THE_CLIPBOARD","helpPage","onload","contentWindow","body","helpScreen","taContainer1","taContainer2","clientWidth","clientHeight","taskTareaIDs","taskTextareas","i5","taskBtnsContainer","taskBtnNames","taskBtnIDs","taskBtnHelp","taskBtns","i6","last","i7","taskLabel","expContainer","expCodeHintLabel","taExpCodeHint","expTaskNameLabel","expTaskNameInput","_musicPlayer","play","pause","Audio","loop","musicPlayer","tasks","$59ed6a7ec7b9b171$export$7191f9b9098a3ea4","toFixed","$59ed6a7ec7b9b171$export$82740b02119cf09d","async","linkTasks","splittedLink","location","href","atob","response","fetch","catch","err","ok","json","data","contents","$df131ed1f7829f58$var$browserHistoryLength","gui","pagesCount","go"],"version":3,"file":"index.8a91e593.js.map"}